<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>memcpy.io - alias</title><link href="https://memcpy.io/" rel="alternate"></link><link href="https://memcpy.io/feeds/alias.atom.xml" rel="self"></link><id>https://memcpy.io/</id><updated>2021-11-04T20:10:00+01:00</updated><entry><title>Git Alias function syntax</title><link href="https://memcpy.io/git-alias-function-syntax.html" rel="alternate"></link><published>2021-11-04T20:10:00+01:00</published><updated>2021-11-04T20:10:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2021-11-04:/git-alias-function-syntax.html</id><summary type="html">&lt;p&gt;A basic example of the git alias function syntax looks like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
    &lt;span class="na"&gt;shortcut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!f() \&lt;/span&gt;
    &lt;span class="na"&gt;{\&lt;/span&gt;
        &lt;span class="na"&gt;echo Hello world!; \&lt;/span&gt;
    &lt;span class="na"&gt;}; f&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This syntax defines a function &lt;code&gt;f&lt;/code&gt; and then calls it. These aliases are executed in a &lt;code&gt;sh&lt;/code&gt; shell,
which means there's no access to Bash / Zsh specific functionality.&lt;/p&gt;
&lt;p&gt;Every command is ended with a &lt;code&gt;;&lt;/code&gt; and each line ended with a &lt;code&gt;\&lt;/code&gt;. This is easy enough
to grok. But when we try to clean up the above snippet and add some quotes to
&lt;code&gt;"Hello world!"&lt;/code&gt;, we hit this obtuse error message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;}&lt;span class="c1"&gt;; f: 1: Syntax error: end of file unexpected (expecting &amp;quot;}&amp;quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This syntax error is caused by quotes needing to be escaped. The reason for this
comes down to how git tokenizes and executes these functions. If you're curious …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A basic example of the git alias function syntax looks like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
    &lt;span class="na"&gt;shortcut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!f() \&lt;/span&gt;
    &lt;span class="na"&gt;{\&lt;/span&gt;
        &lt;span class="na"&gt;echo Hello world!; \&lt;/span&gt;
    &lt;span class="na"&gt;}; f&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This syntax defines a function &lt;code&gt;f&lt;/code&gt; and then calls it. These aliases are executed in a &lt;code&gt;sh&lt;/code&gt; shell,
which means there's no access to Bash / Zsh specific functionality.&lt;/p&gt;
&lt;p&gt;Every command is ended with a &lt;code&gt;;&lt;/code&gt; and each line ended with a &lt;code&gt;\&lt;/code&gt;. This is easy enough
to grok. But when we try to clean up the above snippet and add some quotes to
&lt;code&gt;"Hello world!"&lt;/code&gt;, we hit this obtuse error message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;}&lt;span class="c1"&gt;; f: 1: Syntax error: end of file unexpected (expecting &amp;quot;}&amp;quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This syntax error is caused by quotes needing to be escaped. The reason for this
comes down to how git tokenizes and executes these functions. If you're curious
about how it's managed internally, have a look at
&lt;a href="https://git.kernel.org/pub/scm/git/git.git/tree/run-command.c?h=v2.31.0-rc1#n267"&gt;git/run-commands.c&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/HaleTom"&gt;Tom Hale&lt;/a&gt; wrote this
&lt;a href="https://gist.github.com/HaleTom/61e2c94dc4d76b58c9f38fc8b6cec3ae"&gt;script&lt;/a&gt;
for doing automatic escaping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;quote&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; {
    &lt;span class="nv"&gt;printf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;s/([&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;])/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;\1/g&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}

&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="nv"&gt;previous&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="c1"&gt;; do&lt;/span&gt;
    &lt;span class="nv"&gt;quote&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;$previous&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;previous&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;done&lt;/span&gt;

&lt;span class="nv"&gt;quote&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;$previous&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; #\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;\&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="linux"></category><category term="shell"></category><category term="git"></category><category term="alias"></category><category term="b4"></category><category term="gitconfig"></category><category term="mbox"></category><category term="am"></category><category term="kernel"></category><category term="mailing"></category><category term="list"></category><category term="mailinglists"></category></entry><entry><title>Applying mailing list patches with 'git b4'</title><link href="https://memcpy.io/applying-mailing-list-patches-with-git-b4.html" rel="alternate"></link><published>2021-03-08T12:23:00+01:00</published><updated>2021-03-08T12:23:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2021-03-08:/applying-mailing-list-patches-with-git-b4.html</id><summary type="html">&lt;p&gt;It was created by
&lt;a href="https://people.kernel.org/monsieuricon/introducing-b4-and-patch-attestation"&gt;Konstantin Ryabitsev&lt;/a&gt;
and has become a very frequently used tool for me.&lt;/p&gt;
&lt;p&gt;It supports a lot of different ways for interacting with the Linux Kernel mailing lists.
Of these the &lt;code&gt;b4 am&lt;/code&gt; subcommand is what I primarily use. This subcommand downloads all of
the patches belonging to a patch series and drops them into a &lt;code&gt;.mbox&lt;/code&gt; file. But! It doesn't
apply them to the repository we're currently in, and herein lies the itch that I would like
to scratch.&lt;/p&gt;
&lt;p&gt;The inspiration for this post is the
&lt;a href="https://twitter.com/widawsky/status/1365378004914905088"&gt;script&lt;/a&gt; that
&lt;a href="https://twitter.com/stellarhopper"&gt;@stellarhopper&lt;/a&gt; authored and
&lt;a href="https://twitter.com/widawsky"&gt;@widawsky&lt;/a&gt;
pointed out to me.&lt;/p&gt;
&lt;h2&gt;The Good, the Bad &amp;amp; the Ugly&lt;/h2&gt;
&lt;p&gt;After first publishing this post, people on the twittersphere suggested some alternative approaches,
and it would seem that there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was created by
&lt;a href="https://people.kernel.org/monsieuricon/introducing-b4-and-patch-attestation"&gt;Konstantin Ryabitsev&lt;/a&gt;
and has become a very frequently used tool for me.&lt;/p&gt;
&lt;p&gt;It supports a lot of different ways for interacting with the Linux Kernel mailing lists.
Of these the &lt;code&gt;b4 am&lt;/code&gt; subcommand is what I primarily use. This subcommand downloads all of
the patches belonging to a patch series and drops them into a &lt;code&gt;.mbox&lt;/code&gt; file. But! It doesn't
apply them to the repository we're currently in, and herein lies the itch that I would like
to scratch.&lt;/p&gt;
&lt;p&gt;The inspiration for this post is the
&lt;a href="https://twitter.com/widawsky/status/1365378004914905088"&gt;script&lt;/a&gt; that
&lt;a href="https://twitter.com/stellarhopper"&gt;@stellarhopper&lt;/a&gt; authored and
&lt;a href="https://twitter.com/widawsky"&gt;@widawsky&lt;/a&gt;
pointed out to me.&lt;/p&gt;
&lt;h2&gt;The Good, the Bad &amp;amp; the Ugly&lt;/h2&gt;
&lt;p&gt;After first publishing this post, people on the twittersphere suggested some alternative approaches,
and it would seem that there are three different approaches to creating an alias like this.
Naturally my original idea is the ugly.&lt;/p&gt;
&lt;h3&gt;The Good&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/gregkh/status/1368932670206525441?s=20"&gt;@gregkh suggested&lt;/a&gt; a really short
and to the point approach, where &lt;code&gt;b4 am&lt;/code&gt; simply pipes the &lt;code&gt;.mbox&lt;/code&gt; file to &lt;code&gt;git am&lt;/code&gt;. I think
it is ideal in this specific case since it avoids most the complexity of writing git alias
functions but at the same time doesn't require any external script files.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2021-03-08_git_b4_gkh.png"&gt;&lt;img alt="Alt text" src="/images/2021-03-08_git_b4_gkh.png" title="git b4 shell output - @gregkh approach"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see the verbosity is really nice, and none of the &lt;code&gt;b4&lt;/code&gt; output is thrown out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;b4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;!f() { b4 am -t -o - $1 | git am -s; }; f&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Bad&lt;/h3&gt;
&lt;p&gt;When &lt;a href="https://twitter.com/widawsky"&gt;@widawsky&lt;/a&gt; first linked the
&lt;a href="https://twitter.com/widawsky/status/1365378004914905088"&gt;~/bin/git-b4am&lt;/a&gt;
script by &lt;a href="https://twitter.com/stellarhopper"&gt;@stellarhopper&lt;/a&gt;, it looked like
a standalone shell script. This is not the case however, it is automatically integrated
as a subcommand by git. As &lt;a href="https://twitter.com/EnJens/status/1368885953939521536?s=20"&gt;explained&lt;/a&gt;
by &lt;a href="https://twitter.com/EnJens/"&gt;@EnJens&lt;/a&gt;, git will present any executable accessible
through &lt;code&gt;$PATH/git-XXX&lt;/code&gt; as a subcommand &lt;code&gt;git XXX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2021-03-08_git_b4_stellarhopper.png"&gt;&lt;img alt="Alt text" src="/images/2021-03-08_git_b4_stellarhopper.png" title="git b4 shell output - @stellarhopper approach"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using Zsh, I'm seeing some of the output being written after the command has returned.
Using bash, this was less of an issue. I'd think this is due to the really neat way that
&lt;a href="https://en.wikipedia.org/wiki/Process_substitution"&gt;processes substitution&lt;/a&gt; + tee is
used, &lt;code&gt;tee &amp;gt;(find_apply_mbx)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the general case of running a script as a part of git, I think this is the way to
go. The only downside to me is that the script is an external file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b4am&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#!/bin/bash -eE&lt;/span&gt;

&lt;span class="n"&gt;find_apply_mbx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mbx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/^&lt;/span&gt;&lt;span class="n"&gt;Writing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mbx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$mbx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$mbx&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;b4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find_apply_mbx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Ugly&lt;/h3&gt;
&lt;p&gt;Wanting to avoid the external scripts (and not knowing about &lt;code&gt;$PATH/git-XXX&lt;/code&gt; functionality)
I wrote a cursed version of the &lt;a href="https://twitter.com/widawsky/status/1365378004914905088"&gt;~/bin/git-b4am&lt;/a&gt;
script.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2021-03-08_git_b4.png"&gt;&lt;img alt="Alt text" src="/images/2021-03-08_git_b4.png" title="git b4 shell output"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the helpful output from b4 is lost. This is due to
git alias functions being executed in a &lt;code&gt;sh&lt;/code&gt; shell, which doesn't support the really
neat &lt;a href="https://en.wikipedia.org/wiki/Process_substitution"&gt;processes substitution&lt;/a&gt; approach
that &lt;a href="https://twitter.com/stellarhopper"&gt;@stellarhopper&lt;/a&gt; had used.&lt;/p&gt;
&lt;p&gt;I apologize in advance for the escaped hellscape that is this snippet. A hierarchy of
escapes is required to conform to the git function syntax when using both multiple lines and
quoted strings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;b4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;!f() \&lt;/span&gt;
&lt;span class="ss"&gt;    {\&lt;/span&gt;
&lt;span class="ss"&gt;        b4 am $1 -l -o /tmp/ 2&amp;gt;&amp;amp;1 | \n\&lt;/span&gt;
&lt;span class="ss"&gt;        $( \n\&lt;/span&gt;
&lt;span class="ss"&gt;            mbx=$( \n\&lt;/span&gt;
&lt;span class="ss"&gt;                awk &amp;#39;/^Writing .*\\.mbx/{ print $2 }&amp;#39; \n\&lt;/span&gt;
&lt;span class="ss"&gt;            );  \n\&lt;/span&gt;
&lt;span class="ss"&gt;            [ -z \&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mbx&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot; ] ||  \n\&lt;/span&gt;
&lt;span class="ss"&gt;                git am \&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mbx&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot; 1&amp;gt;&amp;amp;2; \n\&lt;/span&gt;
&lt;span class="ss"&gt;        );  \n\&lt;/span&gt;
&lt;span class="ss"&gt;    }; f&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A git syntax escape &lt;a href="https://gist.github.com/HaleTom/61e2c94dc4d76b58c9f38fc8b6cec3ae"&gt;script&lt;/a&gt;
written by &lt;a href="https://gist.github.com/HaleTom"&gt;Tom Hale&lt;/a&gt; made the escaping much easier.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;After picking your favorite approach, go find the &lt;code&gt;Message-Id&lt;/code&gt; for the LKML
patch or series you want to apply.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; linux
linux$ git b4 &lt;span class="m"&gt;1607651182&lt;/span&gt;-12307-1-git-send-email-victor.liu@nxp.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="linux"></category><category term="kernel"></category><category term="development"></category><category term="shell"></category><category term="git"></category><category term="alias"></category><category term="b4"></category><category term="gitconfig"></category><category term="mbox"></category><category term="am"></category><category term="mailing"></category><category term="list"></category></entry></feed>