<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>memcpy.io</title><link href="http://memcpy.io/" rel="alternate"></link><link href="http://memcpy.io/feeds/all.atom.xml" rel="self"></link><id>http://memcpy.io/</id><updated>2016-08-25T13:05:00+02:00</updated><entry><title>Ethernet device stress testing</title><link href="http://memcpy.io/ethernet-device-stress-testing.html" rel="alternate"></link><updated>2016-08-25T13:05:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-08-25:ethernet-device-stress-testing.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2016-08-25_ethernet_device_testing.png" title="Screenshot of python script" /&gt;&lt;/p&gt;
&lt;p&gt;During testing of power management patches for usb ethernet dongles, a script
was needed to stress test connecting/disconnecting/reconnecting these devices.&lt;/p&gt;
&lt;p&gt;Luckily a script like that already exists as a part of the chromiumos project,
and can be found &lt;a href="https://chromium.googlesource.com/chromiumos/third_party/autotest/+/HEAD/client/site_tests/network_EthernetStressPlug/network_EthernetStressPlug.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That script does however not run standalone and requires a remote device
(chromebook) to execute on. So I took the liberty of changing it to support
local testing. The modified version can be found &lt;a href="files/2016-08-25_network_EthernetStressPlug.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This might come in handy for someone, if not, the script will at least be
archived on this site.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo pip2.7 install autotest
$ ip link
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: wlp2s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP mode DORMANT group default qlen 1000
    link/ether 48:e2:44:f6:e8:5b brd ff:ff:ff:ff:ff:ff
27: enx000ec689ab9e: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:0e:c6:89:ab:9e brd ff:ff:ff:ff:ff:ff
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;INTERFACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enx000ec689ab9e
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;NUM_ITERATIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10
$ sudo python network_EthernetStressPlug.py $INTERFACE $NUM_ITERATIONS
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="kernel"></category><category term="script"></category><category term="collabora"></category><category term="chromiumos"></category></entry><entry><title>Linux kernel development shell scripts</title><link href="http://memcpy.io/linux-kernel-development-shell-scripts.html" rel="alternate"></link><updated>2016-07-26T10:32:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-07-26:linux-kernel-development-shell-scripts.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2016-07-26_linux_development_helper_script.png" title="Terminal screenshot of scripts in use" /&gt;&lt;/p&gt;
&lt;p&gt;While upstreaming kernel patches scripts/checkpatch.pl and scripts/get_maintainer.pl
often come in handy.
But to me the interface they provide is slightly bulky and rely
on using patch files instead of git commits, which to me is a bit inconvenient.&lt;/p&gt;
&lt;p&gt;These scripts are all meant to be included in &lt;strong&gt;.bashrc&lt;/strong&gt; or &lt;strong&gt;.zshrc&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;scripts/checkpatch.pl helper&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; checkpatch &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;+x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; *&lt;span class="s2"&gt;&amp;quot;cache&amp;quot;&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff --cached &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;NUM_COMMITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff HEAD~$NUM_COMMITS..HEAD &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The checkpatch script simple wraps the patch creation process and allows you to
right away specify which &lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/work/linux $ checkpatch 15
WARNING: ENOSYS means &amp;#39;invalid syscall nr&amp;#39; and nothing else
#349: FILE: drivers/tty/serial/sh-sci.c:3026:
+   if (IS_ERR(sciport-&amp;gt;gpios) &amp;amp;&amp;amp; PTR_ERR(sciport-&amp;gt;gpios) != -ENOSYS)

total: 0 errors, 1 warnings, 385 lines checked
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example the 15 last commits are checked against scripts/checkpatch.pl
for correctness.&lt;/p&gt;
&lt;h2&gt;scripts/get_maintainer.pl helper&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; get_maintainer &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;NUM_COMMITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git format-patch HEAD~$NUM_COMMITS..HEAD --stdout &lt;span class="p"&gt;|&lt;/span&gt; scripts/get_maintainer.pl&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove extraneous stats&lt;/span&gt;
  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;$&lt;span class="s2"&gt;MAINTAINERS&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/(.*//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove names from email addresses&lt;/span&gt;
  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;$&lt;span class="s2"&gt;MAINTAINERS&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/.*&amp;lt;//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove left over character&lt;/span&gt;
  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;$&lt;span class="s2"&gt;MAINTAINERS&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/&amp;gt;//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;$&lt;span class="s2"&gt;MAINTAINERS&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; email&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;--to=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;Example&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/work/linux $ get_maintainer 1
--to=gregkh@linuxfoundation.org  --to=jslaby@suse.com  --to=linux-serial@vger.kernel.org  --to=linux-kernel@vger.kernel.org

~/work/linux $ git send-email -1 $(get_maintainer 1)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="kernel"></category><category term="script"></category></entry><entry><title>Running Weston on a Raspbian</title><link href="http://memcpy.io/running-weston-on-a-raspbian.html" rel="alternate"></link><updated>2016-06-03T10:32:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-06-03:running-weston-on-a-raspbian.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2016-06-03_weston.png" title="Weston running on a RPi2." /&gt;&lt;/p&gt;
&lt;p&gt;Progress in the VC4 graphics camp and the Wayland camp now enables us to run
Weston on top of the drm backend for VC4 platforms. Previously software acceleration
using pixman was needed, but this is no longer the case.&lt;/p&gt;
&lt;p&gt;Additionally the rpi backend for weston is now being removed since it has been
obsoleted by the improved drm layer.&lt;/p&gt;
&lt;p&gt;Let's explore running hardware accelerated Weston on the Raspberry Pi.&lt;/p&gt;
&lt;h2&gt;Building Linux kernel&lt;/h2&gt;
&lt;p&gt;A comprehensive guide for building a recent Linux kernel for Raspberry Pi boards has
been written by the Raspberry Pi foundation and is available &lt;a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of this writing the guide helps you build a v4.4 kernel which is good enough for our purposes.&lt;/p&gt;
&lt;h2&gt;Set up alternative install location&lt;/h2&gt;
&lt;p&gt;These build instructions are based on the &lt;a href="https://wayland.freedesktop.org/building.html"&gt;Wayland instructions&lt;/a&gt;
from freedesktop.org, but altered to target VC4 and Raspbian.&lt;/p&gt;
&lt;p&gt;You probably don't want to install experimental builds of software among the usual
software of your operating system, so let's define a prefix for where to install
our builds.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Change WLD to any location you like&lt;/span&gt;
&lt;span class="x"&gt;export WLD=~/local&lt;/span&gt;
&lt;span class="x"&gt;export LD_LIBRARY_PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;/lib&lt;/span&gt;
&lt;span class="x"&gt;export PKG_CONFIG_PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;/lib/pkgconfig/:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;/share/pkgconfig/&lt;/span&gt;
&lt;span class="x"&gt;export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;export ACLOCAL_PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;/share/aclocal&lt;/span&gt;
&lt;span class="x"&gt;export ACLOCAL=&amp;quot;aclocal -I &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;ACLOCAL_PATH&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Needed by autotools&lt;/span&gt;
&lt;span class="x"&gt;mkdir -p &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;/share/aclocal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Installing dependencies&lt;/h2&gt;
&lt;p&gt;Start by installing the build dependencies of mesa, weston and wayland.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Enable source packages
sudo sed -e &amp;quot;s/#\sdeb-src/deb-src/g&amp;quot; -i /etc/apt/sources.list
sudo apt update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above step can alternatively be completed using the GUI of your
package manager, by enabling source packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Install build dependencies of mesa
sudo apt-get build-dep mesa

# Install build dependencies of wayland/weston
sudo apt-get install \
  libevdev libevdev-dev \
  libwacom libwacom-dev \
  libxkbcommon libxkbcommon-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Building Mesa&lt;/h2&gt;
&lt;p&gt;Configure and compile mesa with vc4, wayland and EGL support.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;git clone git://anongit.freedesktop.org/mesa/mesa&lt;/span&gt;
&lt;span class="x"&gt;cd mesa&lt;/span&gt;
&lt;span class="x"&gt;./autogen.sh --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt; \&lt;/span&gt;
&lt;span class="x"&gt;  --enable-gles2 \&lt;/span&gt;
&lt;span class="x"&gt;  --with-egl-platforms=x11,wayland,drm \&lt;/span&gt;
&lt;span class="x"&gt;  --enable-gbm --enable-shared-glapi \&lt;/span&gt;
&lt;span class="x"&gt;  --with-gallium-drivers=vc4 \&lt;/span&gt;
&lt;span class="x"&gt;  --without-dri-drivers \&lt;/span&gt;
&lt;span class="x"&gt;  --disable-va \&lt;/span&gt;
&lt;span class="x"&gt;  --disable-vdpau \&lt;/span&gt;
&lt;span class="x"&gt;  --disable-xvmc \&lt;/span&gt;
&lt;span class="x"&gt;  --disable-omx&lt;/span&gt;
&lt;span class="x"&gt;make -j4 &amp;amp;&amp;amp; make install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Building Weston and dependencies&lt;/h2&gt;
&lt;p&gt;Weston and Wayland have a number of dependencies that also need to be fetched
and built.&lt;/p&gt;
&lt;h4&gt;Wayland&lt;/h4&gt;
&lt;p&gt;Weston is a Wayland compositor, so we're going to have to build Wayland.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;git clone git://anongit.freedesktop.org/wayland/wayland&lt;/span&gt;
&lt;span class="x"&gt;cd wayland&lt;/span&gt;
&lt;span class="x"&gt;./autogen.sh --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;make -j4 &amp;amp;&amp;amp; make install&lt;/span&gt;
&lt;span class="x"&gt;cd ..&lt;/span&gt;

&lt;span class="x"&gt;git clone git://anongit.freedesktop.org/wayland/wayland-protocols&lt;/span&gt;
&lt;span class="x"&gt;cd wayland-protocols&lt;/span&gt;
&lt;span class="x"&gt;./autogen.sh --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;make install&lt;/span&gt;
&lt;span class="x"&gt;cd ..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;libinput&lt;/h4&gt;
&lt;p&gt;libinput is a dependency of Wesron, handles input devices like keyboards, touchpads and mice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;git clone git://anongit.freedesktop.org/wayland/libinput&lt;/span&gt;
&lt;span class="x"&gt;cd libinput&lt;/span&gt;
&lt;span class="x"&gt;./autogen.sh --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;make -j4 &amp;amp;&amp;amp; make install&lt;/span&gt;
&lt;span class="x"&gt;cd ..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Weston&lt;/h4&gt;
&lt;p&gt;Finally we've built all of the dependencies of Weston and can now build it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;git clone git://anongit.freedesktop.org/wayland/weston&lt;/span&gt;
&lt;span class="x"&gt;cd weston&lt;/span&gt;
&lt;span class="x"&gt;./autogen.sh --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;WLD&lt;/span&gt;&lt;span class="x"&gt; \&lt;/span&gt;
&lt;span class="x"&gt;  --disable-libunwind&lt;/span&gt;
&lt;span class="x"&gt;make -j4 &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="x"&gt;sudo make install&lt;/span&gt;
&lt;span class="x"&gt;cd ..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Weston&lt;/h2&gt;
&lt;p&gt;That wasn't so bad, it took a little while, but now we're ready to start Weston.
Now, let's fire up a (virtual) terminal. Make sure that you're not running an
X terminal, ssh terminal or serial terminal.&lt;/p&gt;
&lt;p&gt;Running weston in this way depends on logind.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Make sure that &lt;span class="nv"&gt;$DISPLAY&lt;/span&gt; is unset.
unset DISPLAY

# And that &lt;span class="nv"&gt;$XDG_RUNTIME_DIR&lt;/span&gt; has been set and created.
if test -z &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;; then
  export XDG_RUNTIME_DIR=/tmp/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;UID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-runtime-dir
  if ! test -d &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;; then
    mkdir &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    chmod 0700 &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;1
  fi
fi

# Run weston:
weston
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Try weston applications&lt;/h2&gt;
&lt;p&gt;Now that we're running weston, let's try some applications.
They're located in the top level directory of weston.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weston-terminal&lt;/li&gt;
&lt;li&gt;weston-flower&lt;/li&gt;
&lt;li&gt;weston-gears&lt;/li&gt;
&lt;li&gt;weston-smoke&lt;/li&gt;
&lt;li&gt;weston-image&lt;/li&gt;
&lt;li&gt;weston-view&lt;/li&gt;
&lt;li&gt;weston-resizor&lt;/li&gt;
&lt;li&gt;weston-eventdemo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you've started all of your favorite applications you can grab a screenshot 
by pressing &lt;strong&gt;Super + s&lt;/strong&gt;, which will save wayland-screenshot.png in your home
directory.&lt;/p&gt;</summary><category term="wayland"></category><category term="weston"></category><category term="rpi"></category><category term="rpi2"></category><category term="kernel"></category></entry><entry><title>Coverpage template</title><link href="http://memcpy.io/coverpage-template.html" rel="alternate"></link><updated>2016-03-27T00:34:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-03-27:coverpage-template.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/coverpage/raw/media/screenshot.png" title="coverpage screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;Coverpage is a single-page landing page built to showcase an idea or a product. To allow interested parties to get notified of updates, the template has mailchimp subscription integration.&lt;/p&gt;
&lt;p&gt;A live version of the site can be found at &lt;a href="http://coverpage.memcpy.io"&gt;coverpage.memcpy.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/robertfoss/coverpage.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;GitHub hosting&lt;/h2&gt;
&lt;p&gt;This template was built with the explicit intention of having it be hosted at GitHub in a gh-pages branch.
Therefore it includes a Makefile for pushing copy of the current design to a gh-pages branch.&lt;/p&gt;</summary><category term="coverpage"></category><category term="html"></category><category term="template"></category></entry><entry><title>ESP8266 APA102 Bulb</title><link href="http://memcpy.io/esp8266-apa102-bulb.html" rel="alternate"></link><updated>2016-02-07T22:46:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-02-07:esp8266-apa102-bulb.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_running.jpg" title="v2: Assembled and running over WiFi" /&gt;&lt;/p&gt;
&lt;p&gt;The product of this project is a WiFi connected LED bulb. Every LED on this bulb is individually programmable over the WiFi, by simply sending UDP packets to the bulb.&lt;/p&gt;
&lt;h2&gt;Software and hardware sources&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/robertfoss/esp8266_apa102_bulb.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/robertfoss/esp8266_apa102_bulb"&gt;This project&lt;/a&gt; consists of 3 parts: the software running on the led bulb, the software running on some host computer and the hardware.&lt;/p&gt;
&lt;h3&gt;Firmware&lt;/h3&gt;
&lt;p&gt;The firmare is based on the &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; firwmare for the ESP8266. It's running the APA102 LED driver and the enduser setup module, which I've written about &lt;a href="../user-friendly-setup-of-esp8266-gadgets.html"&gt;previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally it's running 3 lua scripts that deal with different aspects.&lt;/p&gt;
&lt;p&gt;There's init.lua which makes sure we're connected to a WiFi.&lt;/p&gt;
&lt;p&gt;udp_listener.lua receives UDP packets and then sends forwards that data to the APA102 strips.&lt;/p&gt;
&lt;p&gt;And lastly udb_broadcast.lua which periodically broadcasts a heartbeat for this LED bulb to signal that it is alive and well.&lt;/p&gt;
&lt;h3&gt;Host application&lt;/h3&gt;
&lt;p&gt;The current (as of the publish date of this post) incarnation of the host application listens for bulbs that are alive on the hosts network. If a bulb is found is will be added to the list of bulbs to be animated. All animations are simple and sinusoidal and only use the time a bulb has been 'alive' as an input for the animation.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;The hardware is based around the ESP8266 WiFi IC and the APA102 SPI LED IC.&lt;/p&gt;
&lt;p&gt;The flavor of ESP8266 used in this project is the ESP12-F module, since it the latest module available with the integrated antenna form factor.&lt;/p&gt;
&lt;p&gt;APA102 was chosen instead of the much more common WS2812B chip, since it uses a SPI like protocol which isn't timing sensitive and also does not require external capacitors at next to each LED.&lt;/p&gt;
&lt;h4&gt;v3.1 Schematic&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v3.1_schematic.png" title="v3.1: Schematic" /&gt;&lt;/p&gt;
&lt;h4&gt;v2 3D Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_3d_model.png" title="v2: 3D model" /&gt;&lt;/p&gt;
&lt;h4&gt;Assembled v2 hardware&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_95pct_assembled.jpg" title="v2: 95% assembled" /&gt;
&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_running.jpg" title="v2: Assembled and running over WiFi" /&gt;
&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_hanging.jpg" title="v2: Hanging and running over WiFi" /&gt;&lt;/p&gt;</summary><category term="ESP8266"></category><category term="APA102"></category><category term="LED"></category><category term="WIFI"></category></entry><entry><title>WS2812 LED Matrix</title><link href="http://memcpy.io/ws2812-led-matrix.html" rel="alternate"></link><updated>2015-10-12T16:51:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-10-12:ws2812-led-matrix.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2015-10-12_led_matrix_running.jpg" title="LED Matrix Running" /&gt;&lt;/p&gt;
&lt;p&gt;The LED Matrix is constructed out of a WS2812B 8x8 panel, a 3D printed case, an ESP8266, a LiPo battery and some software.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/robertfoss/esp8266_ws2812_matrix.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The software is divided into two parts. The receiving end is run on the ESP8266 that has been flashed with &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; and is a simple lua script that receives UDP packets and forwards them to the excellent WS2812 module created by the the equally excellent &lt;a href="https://github.com/kbeckmann"&gt;Konrad Beckmann&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second part is run on a host pc. It's a simple python script that generates a framebuffer from a sinusoidal animation and transmits it over UDP to the IP of the ESP8266.
This relies on the host pc being able to connect to the ESP8266. Ideally they're on the same LAN to minimise UDP packets being lost or delayed, which causes the animation to lag or skip.
This part was also written by &lt;a href="https://github.com/kbeckmann"&gt;Konrad Beckmann&lt;/a&gt; as part of a larger fancier animation, but repurposed here to be used as a proof of concept.&lt;/p&gt;
&lt;h2&gt;3D Model&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/2015-10-12_led_matrix_case.jpg" title="LED Matrix Case" /&gt;&lt;/p&gt;
&lt;p&gt;The 3D model was created using google sketchup. The case is a made out of 2 parts. A front and a lid. The front has grooves that fit the WS2812 LEDs and make sure that the matrix is firmly stuck in place but also make sure that the light from the LEDs is diffused the proper amount.&lt;/p&gt;
&lt;h2&gt;Bill of materials&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/2015-10-12_led_matrix_parts.jpg" title="LED Matrix Parts" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;18$ &lt;a href="http://www.aliexpress.com/item/8x8-64-LED-Matrix-WS2812-LED-5050-RGB-for-Arduino-FZ1104/32373601634.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;WS2812B 8x8 Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2$ &lt;a href="http://www.aliexpress.com/item/Free-shipping-ESP8266-serial-WIFI-wireless-module-wireless-transceiver/32341788594.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;ESP8266 ESP-01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1$ &lt;a href="http://www.aliexpress.com/item/DC-5V-to-3-3V-Step-Down-Power-Supply-Module-AMS1117-3-3-LDO-800MA/32357910447.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;AMS1117-3.3 Voltage regulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4$ &lt;a href="http://www.aliexpress.com/item/Eachine-3D-X4-RC-Quadcopter-Spare-Parts-3-7V-300Mah-Battery/32335487012.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo 3.7V 300mAh&lt;/a&gt; - A higher capacity battery is better as long as it fits inside of the case.&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/F14786-4-in-1-3-7V-Lipo-Battery-Charger-USB-Interface-4-Ports-For-Hubsan-X4/32394891091.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo USB Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$6 &lt;a href="http://www.aliexpress.com/item/10-pairs-of-battery-plug-connector-1S-2-Pins-Mirco-model-battery-connector/32305697134.html"&gt;Battery connector cable&lt;/a&gt; - Only a few will be needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A thing to be aware of is the fact that all orders from AliExpress will take at least 30 days to arrive to your door. Sometimes more. &lt;/p&gt;
&lt;h2&gt;Hardware construction&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/2015-10-12_led_matrix_assembled.jpg" title="LED Matrix Assembled" /&gt;&lt;/p&gt;
&lt;p&gt;You'll have to excuse the lack of a proper schematic, but this has been a fairly organic project.&lt;/p&gt;
&lt;p&gt;The connectors of for the battery (B_VCC and B_GND), the WS2812 matrix (LED_VCC, LED_GND and LED_DATA), the ESP8266 (ESP_3V3, ESP_CH_PD, ESP_GND, ESP_GPIO2) and the AMS1117-3.3V (LDO_VCC, LDO_GND and LDO_3V3)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B_VCC + LED_VCC + LDO_VCC&lt;/li&gt;
&lt;li&gt;B_GND + LED_GND + LDO_GND + ESP_GND&lt;/li&gt;
&lt;li&gt;LDO_3V3 + ESP_3V3 + ESP_CH_PD&lt;/li&gt;
&lt;li&gt;LED_DATA + ESP_GPIO2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Issues and TODOs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The AMS1117-3.3 is not ideal. The voltage drop is too high. Ideally it should be replaced with a Step-UP/DOWN converter. When the battery is running low the ESP8266 is the first part to fail. It does so while there is quite a lot of power left in the LiPo.&lt;/li&gt;
&lt;li&gt;This setup does not work at all without a WiFi or a host computer feeding it animations. Nothing is preventing is from working without a connection, but the connection is one of the most interesting aspects of the project.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ESP8266"></category><category term="ESP"></category><category term="WS2812"></category><category term="WS2812B"></category><category term="3D Printing"></category><category term="CAD"></category></entry><entry><title>WS2812 Welding Goggles</title><link href="http://memcpy.io/ws2812-welding-goggles.html" rel="alternate"></link><updated>2015-10-11T13:16:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-10-11:ws2812-welding-goggles.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2015-10-11_goggles.png" title="WS2812 Welding Goggles" /&gt;&lt;/p&gt;
&lt;p&gt;The goggles were built using an AtTiny85 module and a WS2812B strip and some bits and bobs that were laying around. A more complete BOM can be found below.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/robertfoss/digispark_ws2812_waves.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The animation is built ontop of the excellent &lt;a href="https://github.com/cpldcpu/light_ws2812/tree/master/light_ws2812_Arduino"&gt;light_ws2812&lt;/a&gt; library. It supports the AtTiny85 better than other competing libraries like FastLED.&lt;/p&gt;
&lt;p&gt;The animation is built around an non-float sin function and a HSV function that generates the actual colors.&lt;/p&gt;
&lt;h2&gt;Video&lt;/h2&gt;
&lt;video controls&gt;
  &lt;source src="videos/2015-10-11_goggles.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;h2&gt;Bill of materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6€ &lt;a href="https://www.weldorado.de/"&gt;Weldorado STROOF DIN4 Welding Goggles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2$ &lt;a href="http://www.aliexpress.com/item/Free-shipping-GY-Digispark-Kickstarter-Mini-Development-board-TINY85-module-for-Ard-usb/32312040804.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Digispark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;23$ &lt;a href="http://www.aliexpress.com/item/1M-WS2812B-WS2811-IC-Chip-built-in-Black-PCB-144-leds-m-Digital-5050-RGB-LED/1838594646.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;WS2812B Strip 144 LEDs/m&lt;/a&gt; - Only about a 5th of the length needed.&lt;/li&gt;
&lt;li&gt;2x$4 &lt;a href="http://www.aliexpress.com/item/Eachine-3D-X4-RC-Quadcopter-Spare-Parts-3-7V-300Mah-Battery/32335487012.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo 3.7V 300mAh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/F14786-4-in-1-3-7V-Lipo-Battery-Charger-USB-Interface-4-Ports-For-Hubsan-X4/32394891091.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo USB Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$6 &lt;a href="http://www.aliexpress.com/item/10-pairs-of-battery-plug-connector-1S-2-Pins-Mirco-model-battery-connector/32305697134.html"&gt;Battery connector cable&lt;/a&gt; - Only a few will be needed.&lt;/li&gt;
&lt;li&gt;$4 &lt;a href="http://www.aliexpress.com/item/Free-shipping-NEW-1M-40-Flat-Color-Rainbow-Ribbon-Cable-wire-Rainbow-Cable-40P-colored-cable/32384971763.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Rainbow cable&lt;/a&gt; - Any cable would do, but this keeps the cables bunched.&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/2rolls-lot-Sticky-Self-Adhesive-Velcro-Hook-and-Loop-Tape-Fastener-3m-20mm-Strip-Solid-Black/1446416834.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Black 20mm veclro&lt;/a&gt; - Only a small part will be needed for attaching to batteries and the inside of the goggles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things to keep in mind when ordering these parts are that Weldorado won't accept an order for a single pair of goggles. You will have to order 3-4 pairs. And additionally pay a decent chunk of change for the shipping. So the more goggles you can find a use for the cheaper it will get. They are very nice looking though. Especially the rubber ones. A thing to note about the goggles is that the headstrap that ships with them is failry useless and probably should be replaced.&lt;/p&gt;
&lt;p&gt;Another thing to be aware of is the fact that all orders from AliExpress will take at least 30 days to arrive to your door. Sometimes more. &lt;/p&gt;
&lt;h2&gt;Hardware construction&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/2015-10-11_goggles_inside.jpg" title="Welding Goggles - Inside" /&gt;&lt;/p&gt;
&lt;p&gt;You'll have to excuse the lack of a proper schematic, but this has been a fairly organic project.&lt;/p&gt;
&lt;p&gt;The connectors of for the batteries (B_VCC and B_GND), both WS2812B strips (LED_VCC, LED_GND and LED_DATA) and the digispark (DIG_5V, DIG_GND and DIG_PIN0) are soldered as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B_VCC + LED_VCC + DIG_5V&lt;/li&gt;
&lt;li&gt;B_GND + LED_GND + DIG_GND&lt;/li&gt;
&lt;li&gt;LED_DATA + DIG_PIN0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Issues and TODOs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There is complete lack of an off-switch, and plugging and unplugging the battery is slightly messy. Especially in the unlit situations where these goggles would be fun to wear.&lt;/li&gt;
&lt;li&gt;The brightness is static and can only be changed by reflashing the AtTiny85. A potentiometer or button that toggles between different intensities (and possibly an OFF of sleep mode) would be very useful.&lt;/li&gt;
&lt;li&gt;The current head strap is made out of leather and is slightly hard to put on yourself.&lt;/li&gt;
&lt;li&gt;The glass is black which does make it very hard to see when it's dark. Since that is when the goggles are most fun to use, maybe the glass should be replaced.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="AtTiny85"></category><category term="Digispark"></category><category term="WS2812"></category><category term="WS2812B"></category><category term="goggles"></category></entry><entry><title>User friendly setup of ESP8266 gadgets</title><link href="http://memcpy.io/user-friendly-setup-of-esp8266-gadgets.html" rel="alternate"></link><updated>2015-07-30T15:10:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-07-30:user-friendly-setup-of-esp8266-gadgets.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2015-07-30_screenshot.png" title="Screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;The ESP8266 lacks a simple end-user compatible way to be configured with the login details of the local WiFi. Running the ESP8266 in a 'captive portal' mode where every http request is hijacked and replaced with form allows the end user to submit the credentials of the local WiFi hotspot by simply connecting to an ESP8266 hosted access point.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robertfoss/esp8266_nodemcu_wifi_setup"&gt;esp8266_nodemcu_wifi_setup&lt;/a&gt; is designed to provide a simple interface for users to configure their ESP8266/NodeMCU based devices through.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start ESP.&lt;/li&gt;
&lt;li&gt;Connect to the "SetupGadget" WiFi through your internet enabled thing of choice.&lt;/li&gt;
&lt;li&gt;Submit credentials of your local WiFi.&lt;/li&gt;
&lt;li&gt;The ESP reboots and connects to your local WiFi.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is this magic! How could a mere mortal like me summon features like this?!&lt;/h2&gt;
&lt;p&gt;Let me tell you..&lt;/p&gt;
&lt;p&gt;By default DNS is not announced in the DHCP offer message, because a DNS server does not ship with NodeMCU.
In order to announce that the ESP8266 is running a DNS server, NodeMCU has to be recompiled to support that.
A guide to building NodeMCU can be found &lt;a href="http://memset.io/building-nodemcu-for-the-esp8266.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to the wonderful work of Andy Reischles on &lt;a href="https://github.com/reischle/CaptiveIntraweb/tree/dev"&gt;Captive Portal&lt;/a&gt;, a lua implementation of a domain hijacking DNS server exists. Which will allow an ESP8266 to redirect all traffic to itself.&lt;/p&gt;
&lt;h4&gt;Detailed guide&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In dhcpserver.h, #define USE_DNS 1&lt;/li&gt;
&lt;li&gt;Build NodeMCU.&lt;/li&gt;
&lt;li&gt;Flash NodeMCU.&lt;/li&gt;
&lt;li&gt;Upload all .lua files &lt;strong&gt;and&lt;/strong&gt; index.html.&lt;/li&gt;
&lt;li&gt;Reboot ESP.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What you need to do&lt;/h4&gt;
&lt;p&gt;After a user has connected throught the portal and sucessfully configured the the ESP8266 with the credentials of the local WiFi, something lua service should be started so that the ESP8266 actually does something.&lt;/p&gt;
&lt;p&gt;I would suggest adding something like this to init.lua:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dofile(&amp;quot;init_connected.lua&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where init_connected.lua is where your script resides.&lt;/p&gt;</summary><category term="NodeMCU"></category><category term="ESP8266"></category><category term="Setup"></category></entry><entry><title>Building NodeMCU for the ESP8266</title><link href="http://memcpy.io/building-nodemcu-for-the-esp8266.html" rel="alternate"></link><updated>2015-05-14T11:31:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-05-14:building-nodemcu-for-the-esp8266.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="images/2015-05-14_esp8266.jpg" title="ESP8266" /&gt;&lt;/p&gt;
&lt;p&gt;This is a simple step-by-step guide to building and flashing NodeMCU for the ESP8266.&lt;/p&gt;
&lt;h3&gt;Build ESP8266 SDK&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;sudo apt-get install make unrar autoconf automake libtool gcc g++ gperf flex bison texinfo gawk ncurses-dev libexpat-dev python sed&lt;/span&gt;
&lt;span class="x"&gt;cd /opt&lt;/span&gt;
&lt;span class="x"&gt;git clone https://github.com/pfalcon/esp-open-sdk.git&lt;/span&gt;
&lt;span class="x"&gt;cd esp-open-sdk&lt;/span&gt;
&lt;span class="x"&gt;git submodule sync&lt;/span&gt;
&lt;span class="x"&gt;git submodule update&lt;/span&gt;
&lt;span class="x"&gt;make&lt;/span&gt;
&lt;span class="x"&gt;export PATH=/opt/esp-open-sdk/xtensa-lx106-elf/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Build NodeMCU&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/nodemcu/nodemcu-firmware.git
cd nodemcu-firmware
# Switch to dev branch, since it&amp;#39;s the most up to date
git checkout --track origin/dev
# Make INTEGER version, since it uses less memory/space
make EXTRA_CCFLAGS=&amp;quot;-DLUA_NUMBER_INTEGRAL&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flash NodeMCU&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;COMPORT=/dev/ttyUSB0 make flash
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Modifying NodeMCU to fit your needs&lt;/h3&gt;
&lt;h5&gt;app/include/user_modules.h&lt;/h5&gt;
&lt;p&gt;Contains a list of which modules to include in the build.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
#define LUA_USE_MODULES_NODE
#define LUA_USE_MODULES_FILE
#define LUA_USE_MODULES_GPIO
#define LUA_USE_MODULES_WIFI
#define LUA_USE_MODULES_NET
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;app/include/user_config.h&lt;/h5&gt;
&lt;p&gt;Contains NodeMCU developer options, but could be of use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
#define DEVELOP_VERSION
#define NODE_ERROR
...
&lt;/pre&gt;&lt;/div&gt;</summary><category term="NodeMCU"></category><category term="ESP8266"></category></entry></feed>