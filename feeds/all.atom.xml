<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>memcpy.io</title><link href="http://memcpy.io/" rel="alternate"></link><link href="http://memcpy.io/feeds/all.atom.xml" rel="self"></link><id>http://memcpy.io/</id><updated>2017-06-02T00:00:00+02:00</updated><entry><title>Android: NXP i.MX6 Buffer Modifier Support</title><link href="http://memcpy.io/android-nxp-imx6-buffer-modifier-support.html" rel="alternate"></link><published>2017-06-02T00:00:00+02:00</published><updated>2017-06-02T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-06-02:/android-nxp-imx6-buffer-modifier-support.html</id><summary type="html">&lt;iframe width="100%" height="380" src="https://www.youtube.com/embed/Dn7hOa9WiYk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;With modifier support added to Mesa and gbm_gralloc, it is now possible to boot Android on iMX6
platforms using no proprietary blobs at all.
This makes iMX6 one of the very few embedded SOCs that needs no blobs at all to run a full graphics stack.&lt;/p&gt;
&lt;p&gt;Not only is that a great win for Open Source in general, but it also makes the iMX6 more attractive as a platform.
A further positive point is that this lays the groundwork for the iMX8 platform, and supporting it will come much easier.&lt;/p&gt;
&lt;h2&gt;What are modifiers used for?&lt;/h2&gt;
&lt;p&gt;Modifiers are used to represent different properties of buffers. These properties can cover a range of
different information about a buffer, for example compression and &lt;a href="https://github.com/laanwj/etna_viv/blob/master/doc/hardware.md#texture-tiling"&gt;tiling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the case of …&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="380" src="https://www.youtube.com/embed/Dn7hOa9WiYk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;With modifier support added to Mesa and gbm_gralloc, it is now possible to boot Android on iMX6
platforms using no proprietary blobs at all.
This makes iMX6 one of the very few embedded SOCs that needs no blobs at all to run a full graphics stack.&lt;/p&gt;
&lt;p&gt;Not only is that a great win for Open Source in general, but it also makes the iMX6 more attractive as a platform.
A further positive point is that this lays the groundwork for the iMX8 platform, and supporting it will come much easier.&lt;/p&gt;
&lt;h2&gt;What are modifiers used for?&lt;/h2&gt;
&lt;p&gt;Modifiers are used to represent different properties of buffers. These properties can cover a range of
different information about a buffer, for example compression and &lt;a href="https://github.com/laanwj/etna_viv/blob/master/doc/hardware.md#texture-tiling"&gt;tiling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the case of the iMX6 and the Vivante GPU which it is equipped with, the modifiers are related to tiling.
The reason being that buffers can be tiled in different ways (Tiled, Super Tiled, etc.) or not at all (Linear).
Before sending buffers out to a display, they need to have the associated tiling information made available,
so that the actual image that is being sent out is not tiled.&lt;/p&gt;
&lt;h2&gt;How was support added?&lt;/h2&gt;
&lt;p&gt;Support was added in two places; Mesa and gbm_gralloc. Mesa has had support added to many of the buffer allocation
functions and to GBM (which is the API provided by Mesa, that gbm_gralloc uses).&lt;/p&gt;
&lt;p&gt;gbm_gralloc in turn had support added for using a new GBM API call, GBM_BO_IMPORT_FD_MODIFIER, which imports
a buffer object as well as accompanying information like modifier used by the buffer object in question.&lt;/p&gt;
&lt;h2&gt;Getting up and running&lt;/h2&gt;
&lt;p&gt;Currently the modifiers work is in the process of being upstreamed, but in the meantime it can be
found &lt;a href="https://customer-git.collabora.com/cgit/android-etnaviv/"&gt;here&lt;/a&gt;. If you'd like to test
this out yourself a How-To can be found &lt;a href="../android-getting-up-and-running-on-the-imx6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This work is built on efforts by a lot people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://varadgautam.wordpress.com/"&gt;Varad Gautam&lt;/a&gt; - Collabora&lt;/li&gt;
&lt;li&gt;Lucas Stach - Pengutronix&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.tomeuvizoso.net/"&gt;Tomeu Vizoso&lt;/a&gt; - Collabora&lt;/li&gt;
&lt;li&gt;Rob Herring - Linaro&lt;/li&gt;
&lt;li&gt;Emil Velikov - Collabora&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.christian-gmeiner.info/"&gt;Christian Gmeiner&lt;/a&gt; - Independent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laanwj.github.io/"&gt;Wladimir Van Der Laan&lt;/a&gt; - Independent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;,
and has been funded by &lt;a href="http://zii.aero"&gt;Zodiac Inflight Innovations&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="imx6"></category><category term="vivante"></category><category term="etnaviv"></category><category term="linux"></category><category term="mesa"></category><category term="tiling"></category><category term="modifier"></category><category term="collabora"></category></entry><entry><title>Android: Getting up and running on the iMX6</title><link href="http://memcpy.io/android-getting-up-and-running-on-the-imx6.html" rel="alternate"></link><published>2017-04-27T00:00:00+02:00</published><updated>2017-04-27T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-04-27:/android-getting-up-and-running-on-the-imx6.html</id><summary type="html">&lt;p&gt;Since the hardware very much matters this is going to be divided into a few parts, the common steps and the hardware specific ones.&lt;/p&gt;
&lt;p&gt;This post is a bit of a living document and will be changed over time, and if you have any questions about it, please reach out through email (robert.foss at collabora.com) or irc (tomeu or robertfoss on #dri-devel on freenode).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Changelog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;
&lt;span class="mi"&gt;2017 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Since the hardware very much matters this is going to be divided into a few parts, the common steps and the hardware specific ones.&lt;/p&gt;
&lt;p&gt;This post is a bit of a living document and will be changed over time, and if you have any questions about it, please reach out through email (robert.foss at collabora.com) or irc (tomeu or robertfoss on #dri-devel on freenode).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Changelog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;etnaviv&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;sabrelite&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common steps&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Install dependencies
sudo apt install u-boot-tools gcc-arm-linux-gnueabihf openjdk-8-jdk android-tools-fsutils python-mako git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip

mkdir /opt/android
cd /opt/android
repo init -u https://android.googlesource.com/platform/manifest -b android-7.1.1_r28
cd /opt/android/.repo
git clone https://customer-git.collabora.com/git/android-etnaviv/android_manifest.git local_manifests -b android-etnaviv
repo sync -j10

mkdir /opt/imx6_android
cd /opt/imx6_android

# Fetch Kconfig, bootloaders and some scripts
git clone https://customer-git.collabora.com/git/android-etnaviv/android-etnaviv.git .

# Fetch the Linux Kernel
git clone https://customer-git.collabora.com/git/android-etnaviv/linux.git -b android-etnaviv

# This will destroy all data on /dev/mmcblk0 and
# create boot/system/cache/data partitions
./setup_sdcard.sh -b /dev/mmcblk0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hardware: iMX6 Sabre&lt;/h2&gt;
&lt;h3&gt;Build Android and Linux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Build android, the kernel, and flash it onto an SD-card
# Run build_android with the correct -d flag
./build_android.sh -b /dev/mmcblk0 -d imx6q-sabre
./build_android.sh -b /dev/mmcblk0 -d imx6qp-sabre
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start Android&lt;/h3&gt;
&lt;p&gt;The SD-card can now be put into the SD3 slot and
the device can be restarted.&lt;/p&gt;
&lt;h2&gt;Hardware: iMX6 Sabrelite&lt;/h2&gt;
&lt;h3&gt;Build Android and Linux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Build android, the kernel, and flash it onto an SD-card
# Run build_android with the correct -d flag
./build_android.sh -b /dev/mmcblk0 -d imx6q-sabrelite
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start Android&lt;/h3&gt;
&lt;p&gt;The micro-sd card can now be put into the micro-sd slot and
the device can be restarted.&lt;/p&gt;
&lt;h2&gt;Hardware: RDU2&lt;/h2&gt;
&lt;h3&gt;Build Android and Linux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Build android, the kernel, and flash it onto an SD-card
# Run build_android with the correct -d flag
./build_android.sh -b /dev/mmcblk0 -d imx6q-zii-rdu2
./build_android.sh -b /dev/mmcblk0 -d imx6qp-zii-rdu2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install the bootloader&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Depending if you have a &amp;gt;=13&amp;quot; version of the RDU2
# use the imx6qp, if &lt;span class="nt"&gt;&amp;lt;13&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;then&lt;/span&gt; &lt;span class="err"&gt;use&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;imx6q&lt;/span&gt;

&lt;span class="na"&gt;IMX6_TYPE=&lt;/span&gt;&lt;span class="s"&gt;imx6q&lt;/span&gt;
&lt;span class="na"&gt;IMX6_TYPE=&lt;/span&gt;&lt;span class="s"&gt;imx6qp&lt;/span&gt;
&lt;span class="na"&gt;BAREBOX=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zodiac/barebox-zii-&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;IMX6_TYPE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-rdu2.img&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Flash&lt;/span&gt; &lt;span class="err"&gt;bootloader&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt;
&lt;span class="err"&gt;dd&lt;/span&gt; &lt;span class="na"&gt;if=&lt;/span&gt;&lt;span class="s"&gt;${BAREBOX}&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;/dev/mmcblk0&lt;/span&gt; &lt;span class="na"&gt;bs=&lt;/span&gt;&lt;span class="s"&gt;1k&lt;/span&gt;
&lt;span class="err"&gt;sync&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Put&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt; &lt;span class="err"&gt;in&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;middle-most&lt;/span&gt; &lt;span class="err"&gt;slot&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;RDU2&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Install&lt;/span&gt; &lt;span class="err"&gt;lrzsz,&lt;/span&gt; &lt;span class="err"&gt;since&lt;/span&gt; &lt;span class="err"&gt;it&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;used&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;ymodem&lt;/span&gt; &lt;span class="err"&gt;upload&lt;/span&gt;
&lt;span class="err"&gt;sudo&lt;/span&gt; &lt;span class="err"&gt;apt&lt;/span&gt; &lt;span class="err"&gt;install&lt;/span&gt; &lt;span class="err"&gt;lrzsz&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;serial&lt;/span&gt; &lt;span class="err"&gt;device&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB2&lt;/span&gt; &lt;span class="err"&gt;and&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt; &lt;span class="err"&gt;with&lt;/span&gt; &lt;span class="err"&gt;minicom&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;The&lt;/span&gt; &lt;span class="err"&gt;numbering&lt;/span&gt; &lt;span class="err"&gt;assumes&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;RDU2&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;only&lt;/span&gt; &lt;span class="err"&gt;serial&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;serial&lt;/span&gt; &lt;span class="err"&gt;device&lt;/span&gt; &lt;span class="err"&gt;connected&lt;/span&gt;
&lt;span class="err"&gt;sudo&lt;/span&gt; &lt;span class="err"&gt;minicom&lt;/span&gt; &lt;span class="err"&gt;-s&lt;/span&gt;
    &lt;span class="err"&gt;+------------------------------------------+&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;A&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;    &lt;span class="err"&gt;Serial&lt;/span&gt; &lt;span class="err"&gt;Device&lt;/span&gt;      &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;B&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Lockfile&lt;/span&gt; &lt;span class="err"&gt;Location&lt;/span&gt;     &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;/var/lock&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;C&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;   &lt;span class="err"&gt;Callin&lt;/span&gt; &lt;span class="err"&gt;Program&lt;/span&gt;      &lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;D&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;  &lt;span class="err"&gt;Callout&lt;/span&gt; &lt;span class="err"&gt;Program&lt;/span&gt;      &lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;E&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;    &lt;span class="err"&gt;Bps/Par/Bits&lt;/span&gt;       &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;115200&lt;/span&gt; &lt;span class="err"&gt;8N1&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;F&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Hardware&lt;/span&gt; &lt;span class="err"&gt;Flow&lt;/span&gt; &lt;span class="err"&gt;Control&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;No&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;G&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Software&lt;/span&gt; &lt;span class="err"&gt;Flow&lt;/span&gt; &lt;span class="err"&gt;Control&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;No&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt;    &lt;span class="err"&gt;Change&lt;/span&gt; &lt;span class="err"&gt;which&lt;/span&gt; &lt;span class="err"&gt;setting?&lt;/span&gt;
    &lt;span class="err"&gt;+------------------------------------------+&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;Quark&lt;/span&gt; &lt;span class="err"&gt;console&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Set&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;source&lt;/span&gt; 
&lt;span class="err"&gt;#HostBoot&lt;/span&gt; &lt;span class="err"&gt;s&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;
&lt;span class="err"&gt;reset&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Restart&lt;/span&gt; &lt;span class="err"&gt;device,&lt;/span&gt; &lt;span class="err"&gt;connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;barebox&lt;/span&gt; &lt;span class="err"&gt;loaded&lt;/span&gt; &lt;span class="err"&gt;just&lt;/span&gt; &lt;span class="err"&gt;loaded&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;from&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB2&lt;/span&gt;
&lt;span class="err"&gt;pic_setwdt&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;
&lt;span class="err"&gt;loady&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Using&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;minicom&lt;/span&gt; &lt;span class="err"&gt;quickly&lt;/span&gt; &lt;span class="err"&gt;initiate&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;ymodem&lt;/span&gt; &lt;span class="err"&gt;file&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;same&lt;/span&gt; &lt;span class="err"&gt;barebox&lt;/span&gt; &lt;span class="err"&gt;image&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;wrote&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Be&lt;/span&gt; &lt;span class="err"&gt;quick,&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;upload&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;timeout&lt;/span&gt; &lt;span class="err"&gt;after&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;few&lt;/span&gt; &lt;span class="err"&gt;seconds&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Write&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;bootloader&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;SPI&lt;/span&gt; &lt;span class="err"&gt;NOR&lt;/span&gt;
&lt;span class="err"&gt;erase&lt;/span&gt; &lt;span class="err"&gt;/dev/m25p0.barebox&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Depending&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;RDU2&lt;/span&gt; &lt;span class="err"&gt;type&lt;/span&gt; &lt;span class="err"&gt;flash&lt;/span&gt; &lt;span class="err"&gt;one&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;following&lt;/span&gt;
&lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="err"&gt;barebox-zii-imx6q-rdu2.img&lt;/span&gt; &lt;span class="err"&gt;/dev/m25p0.barebox&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Or&lt;/span&gt;
&lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="err"&gt;barebox-zii-imx6qp-rdu2.img&lt;/span&gt; &lt;span class="err"&gt;/dev/m25p0.barebox&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;Quark&lt;/span&gt; &lt;span class="err"&gt;console&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt; &lt;span class="err"&gt;again&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Set&lt;/span&gt; &lt;span class="err"&gt;SPI&lt;/span&gt; &lt;span class="err"&gt;NOR&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;source&lt;/span&gt;
&lt;span class="err"&gt;#HostBoot&lt;/span&gt; &lt;span class="err"&gt;s&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;
&lt;span class="err"&gt;reset&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;barebox&lt;/span&gt; &lt;span class="err"&gt;console&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB2&lt;/span&gt; &lt;span class="err"&gt;again&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Edit&lt;/span&gt; &lt;span class="err"&gt;configuration&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;automatically&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;from&lt;/span&gt; &lt;span class="err"&gt;mmc:&lt;/span&gt;
&lt;span class="err"&gt;sedit&lt;/span&gt; &lt;span class="err"&gt;/env/config&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.boot.&lt;/span&gt;&lt;span class="na"&gt;default=&lt;/span&gt;&lt;span class="s"&gt;/env/boot/mmc&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.bootm.&lt;/span&gt;&lt;span class="na"&gt;image=&lt;/span&gt;&lt;span class="s"&gt;/mnt/mmc1.0/android_zImage&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.bootm.&lt;/span&gt;&lt;span class="na"&gt;initrd=&lt;/span&gt;&lt;span class="s"&gt;/mnt/mmc1.0/android_ramdisk.img.gz&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.bootm.&lt;/span&gt;&lt;span class="na"&gt;oftree=&lt;/span&gt;&lt;span class="s"&gt;/mnt/mmc1.0/imx6qp-zii-rdu2.dtb&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.linux.bootargs.&lt;/span&gt;&lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;console=ttymxc0,115200 console=tty0 rw rootwait ip=dhcp buildvariant=userdebug debug ignore_loglevel root=/dev/mmcblk0p2 rootfstype=ext4 rootwait init=/init printk.devkmsg=on verbose enforcing=0 androidboot.selinux=permissive drm.debug=0x00&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;sedit&lt;/span&gt; &lt;span class="err"&gt;/env/boot/mmc&lt;/span&gt;
&lt;span class="err"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="err"&gt;detect&lt;/span&gt; &lt;span class="err"&gt;mmc1&lt;/span&gt;
&lt;span class="err"&gt;mkdir&lt;/span&gt; &lt;span class="err"&gt;-p&lt;/span&gt; &lt;span class="err"&gt;/mnt/mmc1.0&lt;/span&gt;
&lt;span class="err"&gt;automount&lt;/span&gt; &lt;span class="err"&gt;-d&lt;/span&gt; &lt;span class="err"&gt;/mnt/mmc1.0&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;mount&lt;/span&gt; &lt;span class="err"&gt;/dev/mmc1.0&lt;/span&gt; &lt;span class="err"&gt;/mnt/mmc1.0&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;bootm&lt;/span&gt;

&lt;span class="err"&gt;pic_setwdt&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;     &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Disable&lt;/span&gt; &lt;span class="err"&gt;watchdog&lt;/span&gt;

&lt;span class="err"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start Android&lt;/h3&gt;
&lt;p&gt;The SD-card created in the common steps can now be put into
the middlemost slot and the device can be restarted.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This work is built on efforts by a lot people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pengutronix who's been doing i.MX6 platform work.&lt;/li&gt;
&lt;li&gt;Christian Gmeiner, Wladimir Van Der Laan, and the other etanviv developers.&lt;/li&gt;
&lt;li&gt;Rob Herring at Linaro for getting the ball rolling with AOSP for Zii.&lt;/li&gt;
&lt;li&gt;Andrey Smirnov for driver support for the RDU2 such as i.MX6 PCI, ARM PL310 L2 Cache controller, RTC, and other i.MX6qp driver fixups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="imx6"></category><category term="sabre"></category><category term="rdu2"></category><category term="vivante"></category><category term="etnaviv"></category><category term="linux"></category><category term="collabora"></category></entry><entry><title>Android: Changing the bootanimation</title><link href="http://memcpy.io/android-changing-the-bootanimation.html" rel="alternate"></link><published>2017-04-20T00:00:00+02:00</published><updated>2017-04-20T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-04-20:/android-changing-the-bootanimation.html</id><summary type="html">&lt;p&gt;There exists &lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/cmds/bootanimation/FORMAT.md"&gt;official documentation&lt;/a&gt;
for how to create a custom boot animation, but unfortunately it is lacking
in actual examples.&lt;/p&gt;
&lt;p&gt;So this guide is a bit more hands on.&lt;/p&gt;
&lt;h2&gt;Structure of bootanimation.zip&lt;/h2&gt;
&lt;p&gt;Without covering too much of the same gound as the documentation,
let's have a quick look at what is in a simple bootanimation.zip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la bootanimation
total &lt;span class="m"&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 .
drwxr-xr-x &lt;span class="m"&gt;8&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna   &lt;span class="m"&gt;92&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:21 desc.txt
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:44 part0
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:45 part1

$ cat bootanimation/desc.txt 
&lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;1080&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;         &lt;span class="c1"&gt;# WIDTH HEIGHT FPS&lt;/span&gt;
c &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; part0 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;There exists &lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/cmds/bootanimation/FORMAT.md"&gt;official documentation&lt;/a&gt;
for how to create a custom boot animation, but unfortunately it is lacking
in actual examples.&lt;/p&gt;
&lt;p&gt;So this guide is a bit more hands on.&lt;/p&gt;
&lt;h2&gt;Structure of bootanimation.zip&lt;/h2&gt;
&lt;p&gt;Without covering too much of the same gound as the documentation,
let's have a quick look at what is in a simple bootanimation.zip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la bootanimation
total &lt;span class="m"&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 .
drwxr-xr-x &lt;span class="m"&gt;8&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna   &lt;span class="m"&gt;92&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:21 desc.txt
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:44 part0
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:45 part1

$ cat bootanimation/desc.txt 
&lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;1080&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;         &lt;span class="c1"&gt;# WIDTH HEIGHT FPS&lt;/span&gt;
c &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; part0 FFFFFF  &lt;span class="c1"&gt;# TYPE COUNT PAUSE PATH [#RGBHEX] [CLOCK]&lt;/span&gt;
c &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; part1 FFFFFF  &lt;span class="c1"&gt;# TYPE COUNT PAUSE PATH [#RGBHEX] [CLOCK]&lt;/span&gt;

ls -la bootanimation/part0 
total &lt;span class="m"&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna  &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:44 .
drwxr-xr-x &lt;span class="m"&gt;6&lt;/span&gt; hottuna hottuna  &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:40 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0000&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0001&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0002&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0003&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 XXXX.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the "#" comments are mine and not actually present in the files.&lt;/p&gt;
&lt;p&gt;An important thing to note with the zip file is needs to have compression
turned off.&lt;/p&gt;
&lt;h2&gt;Switch bootanimation&lt;/h2&gt;
&lt;p&gt;Download &lt;a href="/files/2017-04-20/bootanimation.zip"&gt;bootanimation.zip&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unzip bootanimation.zip
cd bootanimation
# Edit desc.txt and partN folders to your needs
zip -0qry -i \*.txt \*.png \*.wav @ ../bootanimation.zip *.txt part*

# Option 1, use adb to send bootanimation.zip
adb root
adb remount
adb push bootanimation.zip /system/media/bootanimation.zip

# Option 2, bake bootanimation.zip into your AOSP build
cp bootanimation.zip /opt/aosp/out/target/product/linaro_arm/system/bootanimation.zip
./your_favorite_buildscript_here.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/cmds/bootanimation/FORMAT.md"&gt;bootanimation documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="bootanimation"></category><category term="boot"></category><category term="animation"></category><category term="collabora"></category></entry><entry><title>Audio editing images</title><link href="http://memcpy.io/audio-editing-images.html" rel="alternate"></link><published>2017-04-09T21:35:00+02:00</published><updated>2017-04-09T21:35:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-04-09:/audio-editing-images.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/robertfoss/audio_shop/"&gt;Audio Shop&lt;/a&gt; is a simple script
that I cobbled together that gets you started with mangling image data as
if it was audio data.&lt;/p&gt;
&lt;p&gt;The script wraps 3 individually excellent tools; &lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;,
&lt;a href="https://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; and
&lt;a href="http://sox.sourceforge.net/"&gt;SoX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_bass.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_bass.jpg" title="Eiffel tower bass effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The way it works is by first converting an image to a raw format like rgb
or yuv. This is done to prevent the audio editor from destroying the structure
of (relatively) complex formats like jpg, png or gif.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_echo.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_echo.jpg" title="Eiffel tower echo effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If converting to a raw format is the first step, the second step is
importing the raw image data into the audio editor. To do this
in way you can expect good results from, the raw format should use
a bit-depth that your image editor can use. For example RGB, where …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/robertfoss/audio_shop/"&gt;Audio Shop&lt;/a&gt; is a simple script
that I cobbled together that gets you started with mangling image data as
if it was audio data.&lt;/p&gt;
&lt;p&gt;The script wraps 3 individually excellent tools; &lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;,
&lt;a href="https://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; and
&lt;a href="http://sox.sourceforge.net/"&gt;SoX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_bass.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_bass.jpg" title="Eiffel tower bass effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The way it works is by first converting an image to a raw format like rgb
or yuv. This is done to prevent the audio editor from destroying the structure
of (relatively) complex formats like jpg, png or gif.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_echo.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_echo.jpg" title="Eiffel tower echo effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If converting to a raw format is the first step, the second step is
importing the raw image data into the audio editor. To do this
in way you can expect good results from, the raw format should use
a bit-depth that your image editor can use. For example RGB, where
each color channel is 8 bits. And the audio editor imports the raw
data as 8-bit unsigned data.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_overdrive.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_overdrive.jpg" title="Eiffel tower overdrive effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Additionally when using a format like RGB the Red/Green/Blue color
bits of the channels are located next to eachother like
&lt;small&gt;RRRRRRRGGGGGGGGBBBBBBBB&lt;/small&gt; which causes issues when
doing things like echoes and the echo of of the Red 8-bit field
bleeds into the Green or Blue field.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_phaser.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_phaser.jpg" title="Eiffel tower phaser effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solution to this is using a planar format where the RGB or YUV
channels are not interleaved in the &lt;small&gt;RGBRGBRGBRGB&lt;/small&gt;
fashion but rather &lt;small&gt;RRRRGGGGBBBB&lt;/small&gt;. A format like that
is YUV444P.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-04-09_eiffel_tower_sinc.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-04-09_eiffel_tower_sinc.jpg" title="Eiffel tower sinc effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope you find this tool somewhat useful and/or fun!&lt;/p&gt;</content><category term="audio"></category><category term="art"></category><category term="images"></category><category term="data"></category><category term="bending"></category><category term="databending"></category></entry><entry><title>Android: Enabling mainline graphics</title><link href="http://memcpy.io/android-enabling-mainline-graphics.html" rel="alternate"></link><published>2017-03-28T15:18:00+02:00</published><updated>2017-03-28T15:18:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-03-28:/android-enabling-mainline-graphics.html</id><summary type="html">&lt;p&gt;The  &lt;a href="https://source.android.com/devices/graphics/implement-hwc.html"&gt;HWC&lt;/a&gt; 
(Hardware Composer) API is used by SurfaceFlinger for compositing layers to the screen.
The HWC abstracts objects such as overlays and 2D blitters and helps offload some work
that would normally be done with OpenGL.
SurfaceFlinger on the other hand accepts buffers from multiple sources, composites them,
and sends them to the display.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-03-28_android_graphics_stack.png"&gt;&lt;img alt="Alt text" src="/images/2017-03-28_android_graphics_stack.png" title="Android Graphics Stack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above graphic depicts the traditional Android graphics stack.&lt;/p&gt;
&lt;p&gt;This is where drm_hwcomposer comes into play. Since the mainline kernel graphics stack
doesn't offer the HWC API, drm_hwcomposer is introduced to interface with the mainline
graphics stack through mesa and libdrm. Before this work drm_hwcomposer only offered the
HWC1 API.
Since Android 7.0 version 2 of the HWC API is used by SurfaceFlinger. HWC2 differs in a few
ways …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The  &lt;a href="https://source.android.com/devices/graphics/implement-hwc.html"&gt;HWC&lt;/a&gt; 
(Hardware Composer) API is used by SurfaceFlinger for compositing layers to the screen.
The HWC abstracts objects such as overlays and 2D blitters and helps offload some work
that would normally be done with OpenGL.
SurfaceFlinger on the other hand accepts buffers from multiple sources, composites them,
and sends them to the display.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-03-28_android_graphics_stack.png"&gt;&lt;img alt="Alt text" src="/images/2017-03-28_android_graphics_stack.png" title="Android Graphics Stack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above graphic depicts the traditional Android graphics stack.&lt;/p&gt;
&lt;p&gt;This is where drm_hwcomposer comes into play. Since the mainline kernel graphics stack
doesn't offer the HWC API, drm_hwcomposer is introduced to interface with the mainline
graphics stack through mesa and libdrm. Before this work drm_hwcomposer only offered the
HWC1 API.
Since Android 7.0 version 2 of the HWC API is used by SurfaceFlinger. HWC2 differs in a few
ways from the previous version, for example the semantics of fence support were changed and
the GPU can now be used as a fallback when compositing layers.&lt;/p&gt;
&lt;p&gt;Up until recently the mainline kernel lacked the fence primitive offered by Android
used in HWC1 and HWC2. But after my fellow Collaboran Gustavo Padovan's work on
&lt;a href="http://padovan.org/blog/2016/09/mainline-explicit-fencing-part-1/"&gt;adding fence support&lt;/a&gt;
to the mainline kernel was upstreamed in
&lt;a href="http://padovan.org/blog/2017/02/collabora-contributions-to-linux-kernel-4-10/"&gt;v4.10&lt;/a&gt;,
the mainline kernel now has fence support equivalent to that of Android.&lt;/p&gt;
&lt;p&gt;The new fence support enabled work on drm_hwcomposer to add HWC2 support.
And with it we are now able to boot Android on the db410c running the freedreno driver.
But in theory it should work on any mainline kernel graphics stack enabled GPU.&lt;/p&gt;
&lt;p&gt;Currently the work is being upstreamed to the
&lt;a href="https://chromium.googlesource.com/chromiumos/drm_hwcomposer/"&gt;ChromiumOS repo&lt;/a&gt;
which is the official upstream for drm_hwcomposer.&lt;/p&gt;
&lt;p&gt;A number of projects have seen contributions 8in order to enable this work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kernel - sync_file, in-fence and out-fence support added.&lt;/li&gt;
&lt;li&gt;libdrm - fence support added.&lt;/li&gt;
&lt;li&gt;mesa - support for passing fences added.&lt;/li&gt;
&lt;li&gt;intel-gpu-tools - sync and fence tests added.&lt;/li&gt;
&lt;li&gt;drm_hwcomposer - HWC2 and fence support added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This drm_hwcomposer work is part of a long-standing collaboration between
Google's ChromeOS team and Collabora.&lt;/p&gt;
&lt;p&gt;A number of people have played an important role in this work:
Gustavo Padovan, Rob Clark, Sean Paul, Zach Reizner and Rob Herring.&lt;/p&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="graphics"></category><category term="drm"></category><category term="drm_hwcomposer"></category><category term="hwcomposer"></category><category term="hwc2"></category><category term="collabora"></category></entry><entry><title>Removing the Chromebook Write-Protect screw</title><link href="http://memcpy.io/removing-the-chromebook-write-protect-screw.html" rel="alternate"></link><published>2017-02-27T16:55:00+01:00</published><updated>2017-02-27T16:55:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-02-27:/removing-the-chromebook-write-protect-screw.html</id><summary type="html">&lt;p&gt;This post will look specifically at removing the WP screw from a Chell 
(HP Chromebook 13 G1) device, and verifying that it has been successfully
removed.&lt;/p&gt;
&lt;p&gt;To actually flash firmware to Chromebook machines, a device called a &lt;a href="http://dev.chromium.org/developers/how-tos/install-depot-tools"&gt;Servo&lt;/a&gt;
is needed. While these devices aren't available publicly, they can
be produced freely or possibly requested from Google if you are contributing
code to the ChromiumOS project.&lt;/p&gt;
&lt;h2&gt;Removing the Write-Protect screw&lt;/h2&gt;
&lt;p&gt;&lt;a href="/images/2017-02-27_wp_screw.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-02-27_wp_screw.jpg" title="WP screw on Chell Chromebook"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So this is what the WP screw looks like on a Chell Chromebook. This may or may
not be what you will find in other devices. But if you take a close look,
you will notice that the copper pad that the the screw attaches against is
split into parts that are bridged by a screw …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post will look specifically at removing the WP screw from a Chell 
(HP Chromebook 13 G1) device, and verifying that it has been successfully
removed.&lt;/p&gt;
&lt;p&gt;To actually flash firmware to Chromebook machines, a device called a &lt;a href="http://dev.chromium.org/developers/how-tos/install-depot-tools"&gt;Servo&lt;/a&gt;
is needed. While these devices aren't available publicly, they can
be produced freely or possibly requested from Google if you are contributing
code to the ChromiumOS project.&lt;/p&gt;
&lt;h2&gt;Removing the Write-Protect screw&lt;/h2&gt;
&lt;p&gt;&lt;a href="/images/2017-02-27_wp_screw.jpg"&gt;&lt;img alt="Alt text" src="/images/2017-02-27_wp_screw.jpg" title="WP screw on Chell Chromebook"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So this is what the WP screw looks like on a Chell Chromebook. This may or may
not be what you will find in other devices. But if you take a close look,
you will notice that the copper pad that the the screw attaches against is
split into parts that are bridged by a screw being inserted.&lt;/p&gt;
&lt;h2&gt;Disable Write-Protect&lt;/h2&gt;
&lt;p&gt;So this is the part that requires a &lt;a href="http://dev.chromium.org/developers/how-tos/install-depot-tools"&gt;Servo&lt;/a&gt; device.
And a ChromiumOS checkout, for some help setting one up, have a look at &lt;a href="http://memcpy.io/setting-up-a-chromiumos-dev-environment.html"&gt;my previous post&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Go to your ChromiumOS checkout
cd /opt/chromiumos

# Enter dev environment
cros_sdk

# Set device variable
export BOARD=chell

# Connect to Chromebook using a Servo device
sudo servod -b $BOARD &amp;amp;

# Disable WP
# This step may vary depending on the hardware of your actual Chromebook
dut-control fw_wp:off
sudo /usr/sbin/flashrom -p ft2232_spi:type=servo-v2 --wp-disable
sudo /usr/sbin/flashrom -p ec --wp-disable
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://dev.chromium.org/developers/how-tos/install-depot-tools"&gt;ChromiumOS Servo&lt;/a&gt;&lt;br&gt;
&lt;a href="http://memcpy.io/setting-up-a-chromiumos-dev-environment.html"&gt;Setting up a ChromiumOS dev environment&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="chromium"></category><category term="chromebook"></category><category term="chell"></category><category term="wp screw"></category><category term="wp-screw"></category><category term="collabora"></category></entry><entry><title>Precompiling APK files during Android AOSP build</title><link href="http://memcpy.io/precompiling-apk-files-during-android-aosp-build.html" rel="alternate"></link><published>2017-02-22T16:55:00+01:00</published><updated>2017-02-22T16:55:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-02-22:/precompiling-apk-files-during-android-aosp-build.html</id><summary type="html">&lt;h2&gt;Enable precompilation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /opt/aosp_checkout/

find . -name BoardConfig.mk
./device/huawei/angler/BoardConfig.mk
./device/generic/mini-emulator-x86/BoardConfig.mk
./device/generic/arm64/BoardConfig.mk
./device/generic/mini-emulator-x86_64/BoardConfig.mk
./device/generic/mini-emulator-armv7-a-neon/BoardConfig.mk
./device/generic/mips/BoardConfig.mk
./device/generic/mips64/BoardConfig.mk
./device/generic/x86_64/BoardConfig.mk
./device/generic/mini-emulator-arm64/BoardConfig.mk
./device/generic/mini-emulator-mips/BoardConfig.mk
./device/generic/x86/BoardConfig.mk
./device/generic/armv7-a-neon/BoardConfig.mk
./device/generic/mini-emulator-mips64/BoardConfig.mk
./device/lge/bullhead/BoardConfig.mk
./device/linaro/generic/linaro_x86_64_only/BoardConfig.mk
./device/linaro/generic/linaro_arm64/BoardConfig.mk
./device/linaro/generic/linaro_arm64_only/BoardConfig.mk
./device/linaro/generic/linaro_x86_64/BoardConfig.mk
./device/linaro/generic/BoardConfig.mk
./device/linaro/generic/linaro_arm/BoardConfig.mk
./device/linaro/hikey/hikey/BoardConfig.mk

# Edit the BoardConfig.mk that …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Enable precompilation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /opt/aosp_checkout/

find . -name BoardConfig.mk
./device/huawei/angler/BoardConfig.mk
./device/generic/mini-emulator-x86/BoardConfig.mk
./device/generic/arm64/BoardConfig.mk
./device/generic/mini-emulator-x86_64/BoardConfig.mk
./device/generic/mini-emulator-armv7-a-neon/BoardConfig.mk
./device/generic/mips/BoardConfig.mk
./device/generic/mips64/BoardConfig.mk
./device/generic/x86_64/BoardConfig.mk
./device/generic/mini-emulator-arm64/BoardConfig.mk
./device/generic/mini-emulator-mips/BoardConfig.mk
./device/generic/x86/BoardConfig.mk
./device/generic/armv7-a-neon/BoardConfig.mk
./device/generic/mini-emulator-mips64/BoardConfig.mk
./device/lge/bullhead/BoardConfig.mk
./device/linaro/generic/linaro_x86_64_only/BoardConfig.mk
./device/linaro/generic/linaro_arm64/BoardConfig.mk
./device/linaro/generic/linaro_arm64_only/BoardConfig.mk
./device/linaro/generic/linaro_x86_64/BoardConfig.mk
./device/linaro/generic/BoardConfig.mk
./device/linaro/generic/linaro_arm/BoardConfig.mk
./device/linaro/hikey/hikey/BoardConfig.mk

# Edit the BoardConfig.mk that you are using for your build
cd device/linaro/generic/
nano BoardConfig.mk

# Add the config option
WITH_DEXPREOPT := true

# Propagate the new settings
make defconfig
make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Increase system partition size&lt;/h2&gt;
&lt;p&gt;Depending on the previous system partition size and how many APKs that are built, you may need to increase the system partition size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nano configs/defconfig

# Change the below variable to something big enough to house all of you binaries
CONFIG_BOARD_SYSTEMIMAGE_PARTITION_SIZE=1100000000

# Propagate the new settings
make defconfig
make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="aosp"></category><category term="apk"></category><category term="dex2oat"></category><category term="android"></category><category term="collabora"></category></entry><entry><title>Setting up a ChromiumOS dev environment</title><link href="http://memcpy.io/setting-up-a-chromiumos-dev-environment.html" rel="alternate"></link><published>2017-02-16T10:31:00+01:00</published><updated>2017-02-16T10:31:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-02-16:/setting-up-a-chromiumos-dev-environment.html</id><summary type="html">&lt;h2&gt;Set up environment&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export DEV_DIR=&amp;quot;/opt&amp;quot;
mkdir -p $DEV_DIR
export CHROMIUM_DIR=&amp;quot;$DEV_DIR/chromiumos&amp;quot;
mkdir -p $CHROMIUM_DIR
export PATH=&amp;quot;$DEV_DIR/depot_tools:$PATH&amp;quot;

# The BOARD variable used here is specific for the Chromebook that is
# being targeted, a more generic target like &amp;quot;amd64-generic&amp;quot; could
# be more useful for you needs.
export BOARD=chell

# The USB_DEVICE variable refers to the USB device that will be used
# for flashing ChromiumOS onto a Chromebook.
# Make sure that this device does not contain anything important!
export USB_DEVICE=&amp;quot;/dev/sda&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install dependencies&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install git-core gitk git-gui subversion curl
cd $DEV_DIR
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Get ChromiumOS source&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CHROMIUM_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
repo init -u https://chromium.googlesource.com/chromiumos/manifest.git
repo sync -j25
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Build ChromiumOS …&lt;/h2&gt;</summary><content type="html">&lt;h2&gt;Set up environment&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export DEV_DIR=&amp;quot;/opt&amp;quot;
mkdir -p $DEV_DIR
export CHROMIUM_DIR=&amp;quot;$DEV_DIR/chromiumos&amp;quot;
mkdir -p $CHROMIUM_DIR
export PATH=&amp;quot;$DEV_DIR/depot_tools:$PATH&amp;quot;

# The BOARD variable used here is specific for the Chromebook that is
# being targeted, a more generic target like &amp;quot;amd64-generic&amp;quot; could
# be more useful for you needs.
export BOARD=chell

# The USB_DEVICE variable refers to the USB device that will be used
# for flashing ChromiumOS onto a Chromebook.
# Make sure that this device does not contain anything important!
export USB_DEVICE=&amp;quot;/dev/sda&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install dependencies&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install git-core gitk git-gui subversion curl
cd $DEV_DIR
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Get ChromiumOS source&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CHROMIUM_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
repo init -u https://chromium.googlesource.com/chromiumos/manifest.git
repo sync -j25
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Build ChromiumOS&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cros_sdk -- ./build_packages --board=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BOARD&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cros_sdk -- ./build_image --board=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BOARD&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flash ChromiumOS to storage medium&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cros_sdk -- cros flash --board=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BOARD&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; usb:/&lt;span class="nv"&gt;$USB_DEVICE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install ChromiumOS on Chromebook&lt;/h2&gt;
&lt;h3&gt;Enter Chromebook into dev-mode&lt;/h3&gt;
&lt;p&gt;This part is highly device specific, and depends on how the manufacturer of your device has chosen
to implement the dev-mode switch.&lt;/p&gt;
&lt;p&gt;A partial list of devices and how to enter them into dev-mode can be found &lt;a href="https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Flash ChromiumOS to Chromebook&lt;/h3&gt;
&lt;p&gt;Fire up your Chrombook device and hit Ctrl+Alt+Back, followed by 'chronos' and hit enter.
Followed by the below command to install the ChromiumOS build that was just flashed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/sbin/chromeos-install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Debug an application&lt;/h2&gt;
&lt;h3&gt;On Chromebook&lt;/h3&gt;
&lt;p&gt;Again fire up your Chrombook device and hit Ctrl+Alt+Back, followed by 'chronos' and hit enter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Remount the root drive read / write
sudo mount -o remount,rw /

# Open port so that gdbserver can be reached
sudo /sbin/iptables -A INPUT  -p tcp --dport 1234 -j ACCEPT

# Run gdb server, listening on port 1234 (opened in iptables command above)
sudo gdbserver :1234 chrome
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;On dev machine&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# On x86
cros_sdk -- sudo USE=expat emerge cross-i686-pc-linux-gnu/gdb
# On ARMv7
cros_sdk -- sudo USE=expat emerge cross-armv7a-cros-linux-gnueabi/gdb

cros_sdk -- i686-pc-linux-gnu-gdb &amp;quot;/build/$BOARD/opt/google/chrome/chrome&amp;quot;
(gdb) set sysroot /build/$BOARD/
(gdb) target remote IP_ADDR_CHROMEBOOK:1234
(gdb) continue
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a bit of a rough outline, and is only suitable for Chromebook devices that already are in dev-mode.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://dev.chromium.org/developers/how-tos/install-depot-tools"&gt;ChromiumOS Depo Tools&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.chromium.org/chromium-os/quick-start-guide"&gt;ChromiumOS Quick Start&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices"&gt;ChromiumOS Dev Mode&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.chromium.org/chromium-os/how-tos-and-troubleshooting/debugging-tips"&gt;ChromiumOS Debug&lt;/a&gt;&lt;/p&gt;</content><category term="linux"></category><category term="chromiumos"></category><category term="chromebook"></category><category term="collabora"></category></entry><entry><title>Running an Android Unit Test</title><link href="http://memcpy.io/running-an-android-unit-test.html" rel="alternate"></link><published>2016-12-07T20:23:00+01:00</published><updated>2016-12-07T20:23:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-12-07:/running-an-android-unit-test.html</id><summary type="html">&lt;p&gt;A similar approach can be used for any Android module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd aosp
bash
source build/envsetup.sh &amp;amp;&amp;amp; \
lunch linaro_arm64-userdebug &amp;amp;&amp;amp; \
mmm system/core/libsync/tests &amp;amp;&amp;amp; \
adb root &amp;amp;&amp;amp; \
adb remount &amp;amp;&amp;amp; \
adb sync &amp;amp;&amp;amp; \
adb shell /data/nativetest64/sync-unit-tests/sync-unit-tests
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A similar approach can be used for any Android module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd aosp
bash
source build/envsetup.sh &amp;amp;&amp;amp; \
lunch linaro_arm64-userdebug &amp;amp;&amp;amp; \
mmm system/core/libsync/tests &amp;amp;&amp;amp; \
adb root &amp;amp;&amp;amp; \
adb remount &amp;amp;&amp;amp; \
adb sync &amp;amp;&amp;amp; \
adb shell /data/nativetest64/sync-unit-tests/sync-unit-tests
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="kernel"></category><category term="android"></category><category term="aosp"></category><category term="adb"></category></entry><entry><title>XDC 2016</title><link href="http://memcpy.io/xdc-2016.html" rel="alternate"></link><published>2016-09-23T20:20:00+02:00</published><updated>2016-09-23T20:20:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-09-23:/xdc-2016.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-09-23_xdc_2016.jpg" title="XDC 2016"&gt;&lt;/p&gt;
&lt;p&gt;XDC 2016 was hosted in Helsinki at Haaga-Helia.
The full &lt;a href="https://www.x.org/wiki/Events/XDC2016/Program/"&gt;program&lt;/a&gt; was filmed and is archived &lt;a href="https://www.youtube.com/channel/UCXlH5v1PkEhjzLFTUTm_U7g/videos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016-fast_ui_draw.pdf"&gt;Slides&lt;/a&gt;] FastUIDraw - High Performance 2D renderer for GPUs&lt;/h2&gt;
&lt;p&gt;Kevin Rogovin gave an excellent talk about FastUIDraw, which is a highly optimiser 2d renderer for GPUs.&lt;/p&gt;
&lt;p&gt;By agressively targetting GPUs only and limiting the feature set to what is required by a browser FastUIDraw performs &amp;gt;9.3x faster than Cairo-CPU and &amp;gt;4.8x times the previous GPU state of the art SKIA-GL.&lt;/p&gt;
&lt;p&gt;Hopefully FastUIDraw can be incorporated into upstream of ChromiumOS and Android.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016_2d_perf.pdf"&gt;Slides&lt;/a&gt;] 2D Performance&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://phd.mupuf.org/"&gt;Martin Perez&lt;/a&gt; gave a talk about 2D performance and power consumption of the Xserver.&lt;/p&gt;
&lt;p&gt;The xf86-video-intel driver showed quite mixed performance numbers of 1.51-32.6x times the CPU performance.
The FPS/Watt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-09-23_xdc_2016.jpg" title="XDC 2016"&gt;&lt;/p&gt;
&lt;p&gt;XDC 2016 was hosted in Helsinki at Haaga-Helia.
The full &lt;a href="https://www.x.org/wiki/Events/XDC2016/Program/"&gt;program&lt;/a&gt; was filmed and is archived &lt;a href="https://www.youtube.com/channel/UCXlH5v1PkEhjzLFTUTm_U7g/videos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016-fast_ui_draw.pdf"&gt;Slides&lt;/a&gt;] FastUIDraw - High Performance 2D renderer for GPUs&lt;/h2&gt;
&lt;p&gt;Kevin Rogovin gave an excellent talk about FastUIDraw, which is a highly optimiser 2d renderer for GPUs.&lt;/p&gt;
&lt;p&gt;By agressively targetting GPUs only and limiting the feature set to what is required by a browser FastUIDraw performs &amp;gt;9.3x faster than Cairo-CPU and &amp;gt;4.8x times the previous GPU state of the art SKIA-GL.&lt;/p&gt;
&lt;p&gt;Hopefully FastUIDraw can be incorporated into upstream of ChromiumOS and Android.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016_2d_perf.pdf"&gt;Slides&lt;/a&gt;] 2D Performance&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://phd.mupuf.org/"&gt;Martin Perez&lt;/a&gt; gave a talk about 2D performance and power consumption of the Xserver.&lt;/p&gt;
&lt;p&gt;The xf86-video-intel driver showed quite mixed performance numbers of 1.51-32.6x times the CPU performance.
The FPS/Watt measurements showed 0.73-15.1x times the CPU efficiency.&lt;/p&gt;
&lt;p&gt;When looking at Cairo traces the power efficiency is actually lower using GPU accelaration than with CPU acceleration.
This is somewhat expected in that the Cairo workload is not very high throughput, so the overhead of doing 2D operations is relatively high compared to the actual work.&lt;/p&gt;
&lt;p&gt;Overall toolkits are moving away from letting the Xserver do 2D rendering, for reasons of portability and performance.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016-glvnd-status.pdf"&gt;Slides&lt;/a&gt;] libglvnd Status Update&lt;/h2&gt;
&lt;p&gt;Andy Ritger gave a talk about the current libglvnd status.
The goal of libglvnd is to allow different graphics libraries from potentially different vendors to coexist on a filesystem and in a process.
GLX/EGl/OpenGL/OpenGLES/GL are all supported by libglvnd.&lt;/p&gt;
&lt;p&gt;Currently mesa supports libglvnd for OpenGL and GLX, with EGL support being in the pipeline.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016-drm_hwcomposer.pdf"&gt;Slides&lt;/a&gt;] drm_hwcomposer&lt;/h2&gt;
&lt;p&gt;Sean Paul and Zach Reizner gave an exceptionally well timed talk about the Android &amp;amp;&amp;amp; Chromium drm_hwcomposer project.
drm_hwcomposer is an implementation of the hwcomposer (HWC) API ontop of the Linux DRM/KMS.&lt;/p&gt;
&lt;p&gt;The talk detailed the implications of HWC2 and explicit fencing.
A large part of the HWC1 implementation can be removed from drm_hwcomposer since it's made redundant by the fencing support in HWC2.
So, for example the worker threads (DrmCompositorWorker and FrameWorker) are no longer necessary and can be removed.&lt;/p&gt;
&lt;h2&gt;[&lt;a href="files/2016-09-23/xdc-2016-nouveau_update.pdf"&gt;Slides&lt;/a&gt;] Status update of Nouveau&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hakzsam.wordpress.com/"&gt;Samuel Pitoiset&lt;/a&gt;, Karol Herbst, &lt;a href="https://twitter.com/kurtelborgpm"&gt;Pierre Moreau&lt;/a&gt; and &lt;a href="http://phd.mupuf.org/"&gt;Martin Perez&lt;/a&gt; gave a talk about what has happened in Nouveau land the last year.&lt;/p&gt;
&lt;p&gt;Hardware support is as always taking steps forward, with Fermi support is scheduled for Linux v4.9+.&lt;/p&gt;
&lt;p&gt;A call to arms for Nouveau compiler optimizations was issued by &lt;a href="mailto:martin.peres AT free DOT fr"&gt;Martin Perez&lt;/a&gt;.
There is a lot of low hanging fruit for optimizations is available, and the compiler is overall in a good shape.
So feel free to contact Martin or the Nouveau project if you are interested or curious.&lt;/p&gt;
&lt;p&gt;As of the Maxwell generation of GPUs the firmware needed now has to be signed, GM20x/GP100 firmware has been released, but support for loading firmware on Tegra has not been provided by NVidia.&lt;/p&gt;
&lt;p&gt;Martin made a rather clear point of needing to see some cooperation from NVidia in order for the Nouveau project to be able to make progress with new and upcoming NVidia hardware.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks to the X.Org Foundation and the board of directors for arranging XDC 2016.
This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="graphics"></category><category term="kernel"></category><category term="collabora"></category></entry><entry><title>Building Android for Qemu with Mesa and Virgil3D</title><link href="http://memcpy.io/building-android-for-qemu-with-mesa-and-virgil3d.html" rel="alternate"></link><published>2016-08-30T15:22:00+02:00</published><updated>2016-08-30T15:22:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-08-30:/building-android-for-qemu-with-mesa-and-virgil3d.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-08-30_android_qemu.png" title="Android running on Qemu"&gt;&lt;/p&gt;
&lt;p&gt;Developing Linux for Android on Qemu allows you to do some things that are
not necessarily possible using the stock emulator.
For my purposes I need access to a GPU and be able to modify the driver, which
is where Virgilrenderer and Qemu comes in handy.&lt;/p&gt;
&lt;p&gt;The guide below helps you compile Android and run it on top of Qemu with
Mesa/Virgilrenderer supplying a virtual GPU.
Because of this, the following guide is aimed at Linux hosts.&lt;/p&gt;
&lt;p&gt;This guide is based on Rob Herrings &lt;a href="https://github.com/robherring/generic_device/wiki/KConfig-based-Multi-platform-Android-Device-(and-Mesa-graphics)"&gt;fantastic guide&lt;/a&gt;, but has
been slightly streamlined and had physical hardware support stripped out.&lt;/p&gt;
&lt;h2&gt;Install dependencies&lt;/h2&gt;
&lt;p&gt;These dependencies were available on Ubuntu 16.04, some alternative packages
might be needed for other distributions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install autoconf gcc-aarch64-linux-gnu libaio-dev libbluetooth-dev …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-08-30_android_qemu.png" title="Android running on Qemu"&gt;&lt;/p&gt;
&lt;p&gt;Developing Linux for Android on Qemu allows you to do some things that are
not necessarily possible using the stock emulator.
For my purposes I need access to a GPU and be able to modify the driver, which
is where Virgilrenderer and Qemu comes in handy.&lt;/p&gt;
&lt;p&gt;The guide below helps you compile Android and run it on top of Qemu with
Mesa/Virgilrenderer supplying a virtual GPU.
Because of this, the following guide is aimed at Linux hosts.&lt;/p&gt;
&lt;p&gt;This guide is based on Rob Herrings &lt;a href="https://github.com/robherring/generic_device/wiki/KConfig-based-Multi-platform-Android-Device-(and-Mesa-graphics)"&gt;fantastic guide&lt;/a&gt;, but has
been slightly streamlined and had physical hardware support stripped out.&lt;/p&gt;
&lt;h2&gt;Install dependencies&lt;/h2&gt;
&lt;p&gt;These dependencies were available on Ubuntu 16.04, some alternative packages
might be needed for other distributions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install autoconf gcc-aarch64-linux-gnu libaio-dev libbluetooth-dev libbrlapi-dev libbz2-dev libcap-dev libcap-ng-dev libcurl4-gnutls-dev libepoxy-dev libfdt-dev libgbm-dev libgles2-mesa-dev libglib2.0-dev libibverbs-dev libjpeg8-dev liblzo2-dev libncurses5-dev libnuma-dev librbd-dev librdmacm-dev libsasl2-dev libsdl1.2-dev libsdl2-dev libseccomp-dev libsnappy-dev libssh2-1-dev libtool libusb-1.0-0 libusb-1.0-0-dev libvde-dev libvdeplug-dev libvte-dev libxen-dev valgrind xfslibs-dev xutils-dev zlib1g-dev libusbredirhost-dev usbredirserver
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Set up paths&lt;/h2&gt;
&lt;p&gt;Naturally all of the paths below are configurable, this is just what I used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PROJECT_PATH=&amp;quot;/opt/qemu_android&amp;quot;
export VIRGLRENDERER_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/virglrenderer&amp;quot;
export QEMU_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/qemu&amp;quot;
export LINUX_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/linux&amp;quot;
export ANDROID_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/android&amp;quot;
export ANDROID_TOOLS_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/android-tools&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Virglrenderer&lt;/h2&gt;
&lt;p&gt;Virglrenderer creates a virtual 3D GPU, that allows the Qemu guest to use the
graphics capabilities of the host machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.freedesktop.org/git/virglrenderer &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VIRGLRENDERER_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VIRGLRENDERER_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
./autogen.sh
make -j7
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Qemu&lt;/h2&gt;
&lt;p&gt;Qemu is a full system emulator, and supports a multitude of machine architectures.
We're going to to use x86_64 but also build support for arm64/aarch64.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.qemu-project.org/qemu.git &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;QEMU_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
mkdir &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;QEMU_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/build
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;QEMU_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/build
../configure --target-list=aarch64-softmmu,x86_64-softmmu --enable-gtk --with-gtkabi=3.0 --enable-kvm --enable-spice --enable-usb-redir --enable-libusb
make -j7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Linux kernel&lt;/h2&gt;
&lt;p&gt;Build trunk of mainline linux kernel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; The below instructions use upstream/master but during testing of
this guide, &lt;em&gt;https://git.kernel.org/pub/scm/linux/kernel/git/padovan/linux.git&lt;/em&gt;
and the &lt;em&gt;fences&lt;/em&gt; branch was used due to SW_SYNC not yet being included in upstream.
Inclusion is targeted for &lt;em&gt;v4.9&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LINUX_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LINUX_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
wget http://memcpy.io/files/2016-08-30/Kconfig -O &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LINUX_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.config
make oldconfig
make -j7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If you decide not to use the &lt;em&gt;.config&lt;/em&gt; linked in this step, a few
Kconfig options need to be set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CONFIG_ANDROID=y
CONFIG_ANDROID_BINDER_IPC=y
CONFIG_AUDIT=y
CONFIG_HAVE_ARCH_AUDITSYSCALL=y
CONFIG_AUDITSYSCALL=y
CONFIG_AUDIT_WATCH=y
CONFIG_AUDIT_TREE=y
CONFIG_SECURITY_SELINUX=y
CONFIG_SECURITY_SELINUX_BOOTPARAM=y
CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1
CONFIG_SECURITY_SELINUX_DISABLE=y
CONFIG_SECURITY_SELINUX_DEVELOP=y
CONFIG_SECURITY_SELINUX_AVC_STATS=y
CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0
CONFIG_DEFAULT_SECURITY_SELINUX=y
CONFIG_DEFAULT_SECURITY=&amp;quot;selinux&amp;quot;
CONFIG_VIRTIO_BLK=y
CONFIG_SCSI_VIRTIO=y
CONFIG_VIRTIO_NET=y
CONFIG_VIRTIO_CONSOLE=y
CONFIG_HW_RANDOM_VIRTIO=y
CONFIG_DRM_VIRTIO_GPU=y
CONFIG_VIRT_DRIVERS=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_PCI_LEGACY=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_VIRTIO_INPUT=y
CONFIG_VIRTIO_MMIO=y
CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES=y
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
CONFIG_SYNC=y
CONFIG_SW_SYNC=y
CONFIG_SYNC_FILE=y
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Android&lt;/h2&gt;
&lt;p&gt;Build the Android Open Source Project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; When running &lt;em&gt;source build/envsetup.sh&lt;/em&gt; make sure that you are
using bash. I had issues running &lt;em&gt;lunch&lt;/em&gt; using zsh.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ANDROID_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ANDROID_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
repo init -u https://android.googlesource.com/platform/manifest -b master
cd .repo
git clone https://github.com/robherring/android_manifest.git -b android-6.0 local_manifests
cd ..
repo sync -j20
cd device/linaro/generic
make defconfig
make all
cd ../../..
# The following snippet must be run in bash
bash
source build/envsetup.sh
# Select linaro_x86_64-userdebug
lunch
make -j7
# We don&amp;#39;t need to use bash any longer
exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As of this writing DRM fences related patches by Gustavo Padovan have yet to be included
into AOSP, and therefore have to be included manually until it is upstreamed.
After switching to this branch, the AOSP project has to be rebuilt again. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd $ANDROID_PATH/system/core/
git remote add padovan git://git.collabora.com/git/user/padovan/android-system-core.git
git fetch padovan
git checkout padovan/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;mkbootimg&lt;/h2&gt;
&lt;p&gt;Fetch the make boot image script. This script later assembles the boot image, &lt;em&gt;boot.img&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://android.googlesource.com/platform/system/core.git $ANDROID_TOOLS_PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Run Qemu machine&lt;/h2&gt;
&lt;p&gt;When running the below script, make sure that the all of the paths from step two
have been exported.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://memcpy.io/files/2016-08-30/boot_android_qemu.sh -O &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/boot_android_qemu.sh
chmod +x &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/boot_android_qemu.sh
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/boot_android_qemu.sh x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this guide will have enabled you build the required software and run Android on
Qemu with a virtual GPU.
This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="kernel"></category><category term="android"></category><category term="qemu"></category><category term="collabora"></category></entry><entry><title>Ethernet device stress testing</title><link href="http://memcpy.io/ethernet-device-stress-testing.html" rel="alternate"></link><published>2016-08-25T13:05:00+02:00</published><updated>2016-08-25T13:05:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-08-25:/ethernet-device-stress-testing.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-08-25_ethernet_device_testing.png" title="Screenshot of python script"&gt;&lt;/p&gt;
&lt;p&gt;During testing of power management patches for usb ethernet dongles, a script
was needed to stress test connecting/disconnecting/reconnecting these devices.&lt;/p&gt;
&lt;p&gt;Luckily a script like that already exists as a part of the chromiumos project,
and can be found &lt;a href="https://chromium.googlesource.com/chromiumos/third_party/autotest/+/HEAD/client/site_tests/network_EthernetStressPlug/network_EthernetStressPlug.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That script does however not run standalone and requires a remote device
(chromebook) to execute on. So I took the liberty of changing it to support
local testing. The modified version can be found &lt;a href="files/2016-08-25/network_EthernetStressPlug.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This might come in handy for someone, if not, the script will at least be
archived on this site.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip2.7 install autotest
$ ip link
&lt;span class="m"&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT group default qlen &lt;span class="m"&gt;1&lt;/span&gt;
    link/loopback &lt;span class="m"&gt;00&lt;/span&gt;:00:00 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-08-25_ethernet_device_testing.png" title="Screenshot of python script"&gt;&lt;/p&gt;
&lt;p&gt;During testing of power management patches for usb ethernet dongles, a script
was needed to stress test connecting/disconnecting/reconnecting these devices.&lt;/p&gt;
&lt;p&gt;Luckily a script like that already exists as a part of the chromiumos project,
and can be found &lt;a href="https://chromium.googlesource.com/chromiumos/third_party/autotest/+/HEAD/client/site_tests/network_EthernetStressPlug/network_EthernetStressPlug.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That script does however not run standalone and requires a remote device
(chromebook) to execute on. So I took the liberty of changing it to support
local testing. The modified version can be found &lt;a href="files/2016-08-25/network_EthernetStressPlug.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This might come in handy for someone, if not, the script will at least be
archived on this site.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip2.7 install autotest
$ ip link
&lt;span class="m"&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT group default qlen &lt;span class="m"&gt;1&lt;/span&gt;
    link/loopback &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00 brd &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00
&lt;span class="m"&gt;2&lt;/span&gt;: wlp2s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP mode DORMANT group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;48&lt;/span&gt;:e2:44:f6:e8:5b brd ff:ff:ff:ff:ff:ff
&lt;span class="m"&gt;27&lt;/span&gt;: enx000ec689ab9e: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state DOWN mode DEFAULT group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;00&lt;/span&gt;:0e:c6:89:ab:9e brd ff:ff:ff:ff:ff:ff
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;INTERFACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enx000ec689ab9e
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;NUM_ITERATIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
$ sudo python network_EthernetStressPlug.py &lt;span class="nv"&gt;$INTERFACE&lt;/span&gt; &lt;span class="nv"&gt;$NUM_ITERATIONS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="kernel"></category><category term="script"></category><category term="collabora"></category><category term="chromiumos"></category></entry><entry><title>Linux kernel development shell scripts</title><link href="http://memcpy.io/linux-kernel-development-shell-scripts.html" rel="alternate"></link><published>2016-07-26T10:32:00+02:00</published><updated>2016-07-26T10:32:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-07-26:/linux-kernel-development-shell-scripts.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-07-26_linux_development_helper_script.png" title="Terminal screenshot of scripts in use"&gt;&lt;/p&gt;
&lt;p&gt;While upstreaming kernel patches scripts/checkpatch.pl and scripts/get_maintainer.pl
often come in handy.
But to me the interface they provide is slightly bulky and rely
on using patch files instead of git commits, which to me is a bit inconvenient.&lt;/p&gt;
&lt;p&gt;These scripts are all meant to be included in &lt;strong&gt;.bashrc&lt;/strong&gt; or &lt;strong&gt;.zshrc&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;scripts/checkpatch.pl helper&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; checkpatch &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;+x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; *&lt;span class="s2"&gt;&amp;quot;cache&amp;quot;&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff --cached &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;NUM_COMMITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff HEAD~&lt;span class="nv"&gt;$NUM_COMMITS&lt;/span&gt;..HEAD &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The checkpatch script simply wraps the patch creation process and allows …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-07-26_linux_development_helper_script.png" title="Terminal screenshot of scripts in use"&gt;&lt;/p&gt;
&lt;p&gt;While upstreaming kernel patches scripts/checkpatch.pl and scripts/get_maintainer.pl
often come in handy.
But to me the interface they provide is slightly bulky and rely
on using patch files instead of git commits, which to me is a bit inconvenient.&lt;/p&gt;
&lt;p&gt;These scripts are all meant to be included in &lt;strong&gt;.bashrc&lt;/strong&gt; or &lt;strong&gt;.zshrc&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;scripts/checkpatch.pl helper&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; checkpatch &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;+x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; *&lt;span class="s2"&gt;&amp;quot;cache&amp;quot;&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff --cached &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;NUM_COMMITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;exec&lt;/span&gt; git diff HEAD~&lt;span class="nv"&gt;$NUM_COMMITS&lt;/span&gt;..HEAD &lt;span class="p"&gt;|&lt;/span&gt; scripts/checkpatch.pl --no-signoff -q -
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The checkpatch script simply wraps the patch creation process and allows you to
right away specify which &lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/work/linux $ checkpatch 15
WARNING: ENOSYS means &amp;#39;invalid syscall nr&amp;#39; and nothing else
#349: FILE: drivers/tty/serial/sh-sci.c:3026:
+   if (IS_ERR(sciport-&amp;gt;gpios) &amp;amp;&amp;amp; PTR_ERR(sciport-&amp;gt;gpios) != -ENOSYS)

total: 0 errors, 1 warnings, 385 lines checked
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example the 15 last commits are checked against scripts/checkpatch.pl
for correctness.&lt;/p&gt;
&lt;h2&gt;scripts/get_maintainer.pl helper&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; get_maintainer &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;NUM_COMMITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git format-patch HEAD~&lt;span class="nv"&gt;$NUM_COMMITS&lt;/span&gt;..HEAD --stdout &lt;span class="p"&gt;|&lt;/span&gt; scripts/get_maintainer.pl&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove extraneous stats&lt;/span&gt;
  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$MAINTAINERS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/(.*//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove names from email addresses&lt;/span&gt;
  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$MAINTAINERS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/.*&amp;lt;//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove left over character&lt;/span&gt;
  &lt;span class="nv"&gt;MAINTAINERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$MAINTAINERS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/&amp;gt;//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$MAINTAINERS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; email&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;--to=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;Example&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/work/linux $ get_maintainer 1
--to=gregkh@linuxfoundation.org  --to=jslaby@suse.com  --to=linux-serial@vger.kernel.org  --to=linux-kernel@vger.kernel.org

~/work/linux $ git send-email -1 $(get_maintainer 1)
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="kernel"></category><category term="script"></category><category term="collabora"></category></entry><entry><title>Running Weston on a Raspbian</title><link href="http://memcpy.io/running-weston-on-a-raspbian.html" rel="alternate"></link><published>2016-06-03T10:32:00+02:00</published><updated>2016-06-03T10:32:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-06-03:/running-weston-on-a-raspbian.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-06-03_weston.png" title="Weston running on a RPi2."&gt;&lt;/p&gt;
&lt;p&gt;Progress in the VC4 graphics camp and the Wayland camp now enables us to run
Weston on top of the drm backend for VC4 platforms. Previously software acceleration
using pixman was needed, but this is no longer the case.&lt;/p&gt;
&lt;p&gt;Additionally the rpi backend for weston is now being removed since it has been
obsoleted by the improved drm layer.&lt;/p&gt;
&lt;p&gt;Let's explore running hardware accelerated Weston on the Raspberry Pi.&lt;/p&gt;
&lt;h2&gt;Building Linux kernel&lt;/h2&gt;
&lt;p&gt;A comprehensive guide for building a recent Linux kernel for Raspberry Pi boards has
been written by the Raspberry Pi foundation and is available &lt;a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of this writing the guide helps you build a v4.4 kernel which is good enough for our purposes.&lt;/p&gt;
&lt;h2&gt;Set up alternative install location&lt;/h2&gt;
&lt;p&gt;These build instructions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-06-03_weston.png" title="Weston running on a RPi2."&gt;&lt;/p&gt;
&lt;p&gt;Progress in the VC4 graphics camp and the Wayland camp now enables us to run
Weston on top of the drm backend for VC4 platforms. Previously software acceleration
using pixman was needed, but this is no longer the case.&lt;/p&gt;
&lt;p&gt;Additionally the rpi backend for weston is now being removed since it has been
obsoleted by the improved drm layer.&lt;/p&gt;
&lt;p&gt;Let's explore running hardware accelerated Weston on the Raspberry Pi.&lt;/p&gt;
&lt;h2&gt;Building Linux kernel&lt;/h2&gt;
&lt;p&gt;A comprehensive guide for building a recent Linux kernel for Raspberry Pi boards has
been written by the Raspberry Pi foundation and is available &lt;a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of this writing the guide helps you build a v4.4 kernel which is good enough for our purposes.&lt;/p&gt;
&lt;h2&gt;Set up alternative install location&lt;/h2&gt;
&lt;p&gt;These build instructions are based on the &lt;a href="https://wayland.freedesktop.org/building.html"&gt;Wayland instructions&lt;/a&gt;
from freedesktop.org, but altered to target VC4 and Raspbian.&lt;/p&gt;
&lt;p&gt;You probably don't want to install experimental builds of software among the usual
software of your operating system, so let's define a prefix for where to install
our builds.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Change WLD to any location you like
export WLD=~/local
export LD_LIBRARY_PATH=$WLD/lib
export PKG_CONFIG_PATH=$WLD/lib/pkgconfig/:$WLD/share/pkgconfig/
export PATH=$WLD/bin:$PATH
export ACLOCAL_PATH=$WLD/share/aclocal
export ACLOCAL=&amp;quot;aclocal -I $ACLOCAL_PATH&amp;quot;

# Needed by autotools
mkdir -p $WLD/share/aclocal
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Installing dependencies&lt;/h2&gt;
&lt;p&gt;Start by installing the build dependencies of mesa, weston and wayland.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Enable source packages
sudo sed -e &amp;quot;s/#\sdeb-src/deb-src/g&amp;quot; -i /etc/apt/sources.list
sudo apt update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above step can alternatively be completed using the GUI of your
package manager, by enabling source packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Install build dependencies of mesa
sudo apt-get build-dep mesa

# Install build dependencies of wayland/weston
sudo apt-get install \
  libevdev libevdev-dev \
  libwacom libwacom-dev \
  libxkbcommon libxkbcommon-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Building Mesa&lt;/h2&gt;
&lt;p&gt;Configure and compile mesa with vc4, wayland and EGL support.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://anongit.freedesktop.org/mesa/mesa
cd mesa
./autogen.sh --prefix=$WLD \
  --enable-gles2 \
  --with-egl-platforms=x11,wayland,drm \
  --enable-gbm --enable-shared-glapi \
  --with-gallium-drivers=vc4 \
  --without-dri-drivers \
  --disable-va \
  --disable-vdpau \
  --disable-xvmc \
  --disable-omx
make -j4 &amp;amp;&amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Building Weston and dependencies&lt;/h2&gt;
&lt;p&gt;Weston and Wayland have a number of dependencies that also need to be fetched
and built.&lt;/p&gt;
&lt;h4&gt;Wayland&lt;/h4&gt;
&lt;p&gt;Weston is a Wayland compositor, so we're going to have to build Wayland.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://anongit.freedesktop.org/wayland/wayland
cd wayland
./autogen.sh --prefix=$WLD
make -j4 &amp;amp;&amp;amp; make install
cd ..

git clone git://anongit.freedesktop.org/wayland/wayland-protocols
cd wayland-protocols
./autogen.sh --prefix=$WLD
make install
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;libinput&lt;/h4&gt;
&lt;p&gt;libinput is a dependency of Weston, handles input devices like keyboards, touchpads and mice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://anongit.freedesktop.org/wayland/libinput
cd libinput
./autogen.sh --prefix=$WLD
make -j4 &amp;amp;&amp;amp; make install
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Weston&lt;/h4&gt;
&lt;p&gt;Finally we've built all of the dependencies of Weston and can now build it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://anongit.freedesktop.org/wayland/weston
cd weston
./autogen.sh --prefix=$WLD \
  --disable-libunwind
make -j4 &amp;amp;&amp;amp;
sudo make install
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Weston&lt;/h2&gt;
&lt;p&gt;That wasn't so bad, it took a little while, but now we're ready to start Weston.
Now, let's fire up a (virtual) terminal. Make sure that you're not running an
X terminal, ssh terminal or serial terminal.&lt;/p&gt;
&lt;p&gt;Running weston in this way depends on logind.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Make sure that &lt;span class="nv"&gt;$DISPLAY&lt;/span&gt; is unset.
unset DISPLAY

# And that &lt;span class="nv"&gt;$XDG_RUNTIME_DIR&lt;/span&gt; has been set and created.
if test -z &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;; then
  export XDG_RUNTIME_DIR=/tmp/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;UID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-runtime-dir
  if ! test -d &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;; then
    mkdir &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    chmod 0700 &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;1
  fi
fi

# Run weston:
weston
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Try weston applications&lt;/h2&gt;
&lt;p&gt;Now that we're running weston, let's try some applications.
They're located in the top level directory of weston.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weston-terminal&lt;/li&gt;
&lt;li&gt;weston-flower&lt;/li&gt;
&lt;li&gt;weston-gears&lt;/li&gt;
&lt;li&gt;weston-smoke&lt;/li&gt;
&lt;li&gt;weston-image&lt;/li&gt;
&lt;li&gt;weston-view&lt;/li&gt;
&lt;li&gt;weston-resizor&lt;/li&gt;
&lt;li&gt;weston-eventdemo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you've started all of your favorite applications you can grab a screenshot 
by pressing &lt;strong&gt;Super + s&lt;/strong&gt;, which will save wayland-screenshot.png in your home
directory.&lt;/p&gt;</content><category term="wayland"></category><category term="weston"></category><category term="rpi"></category><category term="rpi2"></category><category term="kernel"></category></entry><entry><title>Coverpage template</title><link href="http://memcpy.io/coverpage-template.html" rel="alternate"></link><published>2016-03-27T00:34:00+01:00</published><updated>2016-03-27T00:34:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-03-27:/coverpage-template.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/coverpage/raw/media/screenshot.png" title="coverpage screenshot"&gt;&lt;/p&gt;
&lt;p&gt;Coverpage is a single-page landing page built to showcase an idea or a product. To allow interested parties to get notified of updates, the template has mailchimp subscription integration.&lt;/p&gt;
&lt;p&gt;A live version of the site can be found at &lt;a href="http://coverpage.memcpy.io"&gt;coverpage.memcpy.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/coverpage.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;GitHub hosting&lt;/h2&gt;
&lt;p&gt;This template was built with the explicit intention of having it be hosted at GitHub in a gh-pages branch.
Therefore it includes a Makefile for pushing copy of the current design to a gh-pages branch.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/coverpage/raw/media/screenshot.png" title="coverpage screenshot"&gt;&lt;/p&gt;
&lt;p&gt;Coverpage is a single-page landing page built to showcase an idea or a product. To allow interested parties to get notified of updates, the template has mailchimp subscription integration.&lt;/p&gt;
&lt;p&gt;A live version of the site can be found at &lt;a href="http://coverpage.memcpy.io"&gt;coverpage.memcpy.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/coverpage.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;GitHub hosting&lt;/h2&gt;
&lt;p&gt;This template was built with the explicit intention of having it be hosted at GitHub in a gh-pages branch.
Therefore it includes a Makefile for pushing copy of the current design to a gh-pages branch.&lt;/p&gt;</content><category term="coverpage"></category><category term="html"></category><category term="template"></category></entry><entry><title>ESP8266 APA102 Bulb</title><link href="http://memcpy.io/esp8266-apa102-bulb.html" rel="alternate"></link><published>2016-02-07T22:46:00+01:00</published><updated>2016-02-07T22:46:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-02-07:/esp8266-apa102-bulb.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_running.jpg" title="v2: Assembled and running over WiFi"&gt;&lt;/p&gt;
&lt;p&gt;The product of this project is a WiFi connected LED bulb. Every LED on this bulb is individually programmable over the WiFi, by simply sending UDP packets to the bulb.&lt;/p&gt;
&lt;h2&gt;Software and hardware sources&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/esp8266_apa102_bulb.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/robertfoss/esp8266_apa102_bulb"&gt;This project&lt;/a&gt; consists of 3 parts: the software running on the led bulb, the software running on some host computer and the hardware.&lt;/p&gt;
&lt;h3&gt;Firmware&lt;/h3&gt;
&lt;p&gt;The firmare is based on the &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; firwmare for the ESP8266. It's running the APA102 LED driver and the enduser setup module, which I've written about &lt;a href="../user-friendly-setup-of-esp8266-gadgets.html"&gt;previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally it's running 3 lua scripts that deal with different aspects.&lt;/p&gt;
&lt;p&gt;There's init.lua which makes sure we're connected to a WiFi.&lt;/p&gt;
&lt;p&gt;udp_listener.lua receives UDP packets and then sends forwards that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_running.jpg" title="v2: Assembled and running over WiFi"&gt;&lt;/p&gt;
&lt;p&gt;The product of this project is a WiFi connected LED bulb. Every LED on this bulb is individually programmable over the WiFi, by simply sending UDP packets to the bulb.&lt;/p&gt;
&lt;h2&gt;Software and hardware sources&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/esp8266_apa102_bulb.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/robertfoss/esp8266_apa102_bulb"&gt;This project&lt;/a&gt; consists of 3 parts: the software running on the led bulb, the software running on some host computer and the hardware.&lt;/p&gt;
&lt;h3&gt;Firmware&lt;/h3&gt;
&lt;p&gt;The firmare is based on the &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; firwmare for the ESP8266. It's running the APA102 LED driver and the enduser setup module, which I've written about &lt;a href="../user-friendly-setup-of-esp8266-gadgets.html"&gt;previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally it's running 3 lua scripts that deal with different aspects.&lt;/p&gt;
&lt;p&gt;There's init.lua which makes sure we're connected to a WiFi.&lt;/p&gt;
&lt;p&gt;udp_listener.lua receives UDP packets and then sends forwards that data to the APA102 strips.&lt;/p&gt;
&lt;p&gt;And lastly udb_broadcast.lua which periodically broadcasts a heartbeat for this LED bulb to signal that it is alive and well.&lt;/p&gt;
&lt;h3&gt;Host application&lt;/h3&gt;
&lt;p&gt;The current (as of the publish date of this post) incarnation of the host application listens for bulbs that are alive on the hosts network. If a bulb is found is will be added to the list of bulbs to be animated. All animations are simple and sinusoidal and only use the time a bulb has been 'alive' as an input for the animation.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;The hardware is based around the ESP8266 WiFi IC and the APA102 SPI LED IC.&lt;/p&gt;
&lt;p&gt;The flavor of ESP8266 used in this project is the ESP12-F module, since it the latest module available with the integrated antenna form factor.&lt;/p&gt;
&lt;p&gt;APA102 was chosen instead of the much more common WS2812B chip, since it uses a SPI like protocol which isn't timing sensitive and also does not require external capacitors at next to each LED.&lt;/p&gt;
&lt;h4&gt;v3.1 Schematic&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v3.1_schematic.png" title="v3.1: Schematic"&gt;&lt;/p&gt;
&lt;h4&gt;v2 3D Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_3d_model.png" title="v2: 3D model"&gt;&lt;/p&gt;
&lt;h4&gt;Assembled v2 hardware&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_95pct_assembled.jpg" title="v2: 95% assembled"&gt;
&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_running.jpg" title="v2: Assembled and running over WiFi"&gt;
&lt;img alt="Alt text" src="https://github.com/robertfoss/esp8266_apa102_bulb/raw/media/v2_hanging.jpg" title="v2: Hanging and running over WiFi"&gt;&lt;/p&gt;</content><category term="ESP8266"></category><category term="APA102"></category><category term="LED"></category><category term="WIFI"></category></entry><entry><title>WS2812 LED Matrix</title><link href="http://memcpy.io/ws2812-led-matrix.html" rel="alternate"></link><published>2015-10-12T16:51:00+02:00</published><updated>2015-10-12T16:51:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-10-12:/ws2812-led-matrix.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-12_led_matrix_running.jpg" title="LED Matrix Running"&gt;&lt;/p&gt;
&lt;p&gt;The LED Matrix is constructed out of a WS2812B 8x8 panel, a 3D printed case, an ESP8266, a LiPo battery and some software.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/esp8266_ws2812_matrix.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The software is divided into two parts. The receiving end is run on the ESP8266 that has been flashed with &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; and is a simple lua script that receives UDP packets and forwards them to the excellent WS2812 module created by the the equally excellent &lt;a href="https://github.com/kbeckmann"&gt;Konrad Beckmann&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second part is run on a host pc. It's a simple python script that generates a framebuffer from a sinusoidal animation and transmits it over UDP to the IP of the ESP8266.
This relies on the host pc being able to connect to the ESP8266 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-12_led_matrix_running.jpg" title="LED Matrix Running"&gt;&lt;/p&gt;
&lt;p&gt;The LED Matrix is constructed out of a WS2812B 8x8 panel, a 3D printed case, an ESP8266, a LiPo battery and some software.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/esp8266_ws2812_matrix.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The software is divided into two parts. The receiving end is run on the ESP8266 that has been flashed with &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; and is a simple lua script that receives UDP packets and forwards them to the excellent WS2812 module created by the the equally excellent &lt;a href="https://github.com/kbeckmann"&gt;Konrad Beckmann&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second part is run on a host pc. It's a simple python script that generates a framebuffer from a sinusoidal animation and transmits it over UDP to the IP of the ESP8266.
This relies on the host pc being able to connect to the ESP8266. Ideally they're on the same LAN to minimise UDP packets being lost or delayed, which causes the animation to lag or skip.
This part was also written by &lt;a href="https://github.com/kbeckmann"&gt;Konrad Beckmann&lt;/a&gt; as part of a larger fancier animation, but repurposed here to be used as a proof of concept.&lt;/p&gt;
&lt;h2&gt;3D Model&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-12_led_matrix_case.jpg" title="LED Matrix Case"&gt;&lt;/p&gt;
&lt;p&gt;The 3D model was created using google sketchup. The case is a made out of 2 parts. A front and a lid. The front has grooves that fit the WS2812 LEDs and make sure that the matrix is firmly stuck in place but also make sure that the light from the LEDs is diffused the proper amount.&lt;/p&gt;
&lt;h2&gt;Bill of materials&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-12_led_matrix_parts.jpg" title="LED Matrix Parts"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;18$ &lt;a href="http://www.aliexpress.com/item/8x8-64-LED-Matrix-WS2812-LED-5050-RGB-for-Arduino-FZ1104/32373601634.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;WS2812B 8x8 Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2$ &lt;a href="http://www.aliexpress.com/item/Free-shipping-ESP8266-serial-WIFI-wireless-module-wireless-transceiver/32341788594.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;ESP8266 ESP-01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1$ &lt;a href="http://www.aliexpress.com/item/DC-5V-to-3-3V-Step-Down-Power-Supply-Module-AMS1117-3-3-LDO-800MA/32357910447.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;AMS1117-3.3 Voltage regulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4$ &lt;a href="http://www.aliexpress.com/item/Eachine-3D-X4-RC-Quadcopter-Spare-Parts-3-7V-300Mah-Battery/32335487012.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo 3.7V 300mAh&lt;/a&gt; - A higher capacity battery is better as long as it fits inside of the case.&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/F14786-4-in-1-3-7V-Lipo-Battery-Charger-USB-Interface-4-Ports-For-Hubsan-X4/32394891091.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo USB Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$6 &lt;a href="http://www.aliexpress.com/item/10-pairs-of-battery-plug-connector-1S-2-Pins-Mirco-model-battery-connector/32305697134.html"&gt;Battery connector cable&lt;/a&gt; - Only a few will be needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A thing to be aware of is the fact that all orders from AliExpress will take at least 30 days to arrive to your door. Sometimes more. &lt;/p&gt;
&lt;h2&gt;Hardware construction&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-12_led_matrix_assembled.jpg" title="LED Matrix Assembled"&gt;&lt;/p&gt;
&lt;p&gt;You'll have to excuse the lack of a proper schematic, but this has been a fairly organic project.&lt;/p&gt;
&lt;p&gt;The connectors of for the battery (B_VCC and B_GND), the WS2812 matrix (LED_VCC, LED_GND and LED_DATA), the ESP8266 (ESP_3V3, ESP_CH_PD, ESP_GND, ESP_GPIO2) and the AMS1117-3.3V (LDO_VCC, LDO_GND and LDO_3V3)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B_VCC + LED_VCC + LDO_VCC&lt;/li&gt;
&lt;li&gt;B_GND + LED_GND + LDO_GND + ESP_GND&lt;/li&gt;
&lt;li&gt;LDO_3V3 + ESP_3V3 + ESP_CH_PD&lt;/li&gt;
&lt;li&gt;LED_DATA + ESP_GPIO2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Issues and TODOs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The AMS1117-3.3 is not ideal. The voltage drop is too high. Ideally it should be replaced with a Step-UP/DOWN converter. When the battery is running low the ESP8266 is the first part to fail. It does so while there is quite a lot of power left in the LiPo.&lt;/li&gt;
&lt;li&gt;This setup does not work at all without a WiFi or a host computer feeding it animations. Nothing is preventing is from working without a connection, but the connection is one of the most interesting aspects of the project.&lt;/li&gt;
&lt;/ul&gt;</content><category term="ESP8266"></category><category term="ESP"></category><category term="WS2812"></category><category term="WS2812B"></category><category term="3D Printing"></category><category term="CAD"></category></entry><entry><title>WS2812 Welding Goggles</title><link href="http://memcpy.io/ws2812-welding-goggles.html" rel="alternate"></link><published>2015-10-11T13:16:00+02:00</published><updated>2015-10-11T13:16:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-10-11:/ws2812-welding-goggles.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-11_goggles.png" title="WS2812 Welding Goggles"&gt;&lt;/p&gt;
&lt;p&gt;The goggles were built using an AtTiny85 module and a WS2812B strip and some bits and bobs that were laying around. A more complete BOM can be found below.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/digispark_ws2812_waves.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The animation is built ontop of the excellent &lt;a href="https://github.com/cpldcpu/light_ws2812/tree/master/light_ws2812_Arduino"&gt;light_ws2812&lt;/a&gt; library. It supports the AtTiny85 better than other competing libraries like FastLED.&lt;/p&gt;
&lt;p&gt;The animation is built around an non-float sin function and a HSV function that generates the actual colors.&lt;/p&gt;
&lt;h2&gt;Video&lt;/h2&gt;
&lt;video controls&gt;
  &lt;source src="videos/2015-10-11_goggles.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;h2&gt;Bill of materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6€ &lt;a href="https://www.weldorado.de/"&gt;Weldorado STROOF DIN4 Welding Goggles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2$ &lt;a href="http://www.aliexpress.com/item/Free-shipping-GY-Digispark-Kickstarter-Mini-Development-board-TINY85-module-for-Ard-usb/32312040804.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Digispark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;23$ &lt;a href="http://www.aliexpress.com/item/1M-WS2812B-WS2811-IC-Chip-built-in-Black-PCB-144-leds-m-Digital-5050-RGB-LED/1838594646.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;WS2812B Strip 144 LEDs/m&lt;/a&gt; - Only about a 5th of the length needed.&lt;/li&gt;
&lt;li&gt;2x$4 &lt;a href="http://www.aliexpress.com/item/Eachine-3D-X4-RC-Quadcopter-Spare-Parts-3-7V-300Mah-Battery/32335487012.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo 3.7V 300mAh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/F14786-4-in-1-3-7V-Lipo-Battery-Charger-USB-Interface-4-Ports-For-Hubsan-X4/32394891091.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo USB Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$6 &lt;a href="http://www.aliexpress.com/item/10-pairs-of-battery-plug-connector-1S-2-Pins-Mirco-model-battery-connector/32305697134.html"&gt;Battery connector cable …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-11_goggles.png" title="WS2812 Welding Goggles"&gt;&lt;/p&gt;
&lt;p&gt;The goggles were built using an AtTiny85 module and a WS2812B strip and some bits and bobs that were laying around. A more complete BOM can be found below.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/digispark_ws2812_waves.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The animation is built ontop of the excellent &lt;a href="https://github.com/cpldcpu/light_ws2812/tree/master/light_ws2812_Arduino"&gt;light_ws2812&lt;/a&gt; library. It supports the AtTiny85 better than other competing libraries like FastLED.&lt;/p&gt;
&lt;p&gt;The animation is built around an non-float sin function and a HSV function that generates the actual colors.&lt;/p&gt;
&lt;h2&gt;Video&lt;/h2&gt;
&lt;video controls&gt;
  &lt;source src="videos/2015-10-11_goggles.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;h2&gt;Bill of materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6€ &lt;a href="https://www.weldorado.de/"&gt;Weldorado STROOF DIN4 Welding Goggles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2$ &lt;a href="http://www.aliexpress.com/item/Free-shipping-GY-Digispark-Kickstarter-Mini-Development-board-TINY85-module-for-Ard-usb/32312040804.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Digispark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;23$ &lt;a href="http://www.aliexpress.com/item/1M-WS2812B-WS2811-IC-Chip-built-in-Black-PCB-144-leds-m-Digital-5050-RGB-LED/1838594646.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;WS2812B Strip 144 LEDs/m&lt;/a&gt; - Only about a 5th of the length needed.&lt;/li&gt;
&lt;li&gt;2x$4 &lt;a href="http://www.aliexpress.com/item/Eachine-3D-X4-RC-Quadcopter-Spare-Parts-3-7V-300Mah-Battery/32335487012.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo 3.7V 300mAh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/F14786-4-in-1-3-7V-Lipo-Battery-Charger-USB-Interface-4-Ports-For-Hubsan-X4/32394891091.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;LiPo USB Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$6 &lt;a href="http://www.aliexpress.com/item/10-pairs-of-battery-plug-connector-1S-2-Pins-Mirco-model-battery-connector/32305697134.html"&gt;Battery connector cable&lt;/a&gt; - Only a few will be needed.&lt;/li&gt;
&lt;li&gt;$4 &lt;a href="http://www.aliexpress.com/item/Free-shipping-NEW-1M-40-Flat-Color-Rainbow-Ribbon-Cable-wire-Rainbow-Cable-40P-colored-cable/32384971763.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Rainbow cable&lt;/a&gt; - Any cable would do, but this keeps the cables bunched.&lt;/li&gt;
&lt;li&gt;$3 &lt;a href="http://www.aliexpress.com/item/2rolls-lot-Sticky-Self-Adhesive-Velcro-Hook-and-Loop-Tape-Fastener-3m-20mm-Strip-Solid-Black/1446416834.html?ws_ab_test=201407_4,201444_5,201409_4"&gt;Black 20mm velcro&lt;/a&gt; - Only a small part will be needed for attaching to batteries and the inside of the goggles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things to keep in mind when ordering these parts are that Weldorado won't accept an order for a single pair of goggles. You will have to order 3-4 pairs. And additionally pay a decent chunk of change for the shipping. So the more goggles you can find a use for the cheaper it will get. They are very nice looking though. Especially the rubber ones. A thing to note about the goggles is that the headstrap that ships with them is failry useless and probably should be replaced.&lt;/p&gt;
&lt;p&gt;Another thing to be aware of is the fact that all orders from AliExpress will take at least 30 days to arrive to your door. Sometimes more. &lt;/p&gt;
&lt;h2&gt;Hardware construction&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-11_goggles_inside.jpg" title="Welding Goggles - Inside"&gt;&lt;/p&gt;
&lt;p&gt;You'll have to excuse the lack of a proper schematic, but this has been a fairly organic project.&lt;/p&gt;
&lt;p&gt;The connectors of for the batteries (B&lt;sub&gt;vcc&lt;/sub&gt; and B&lt;sub&gt;gnd&lt;/sub&gt;), both WS2812B strips (Led&lt;sub&gt;vcc&lt;/sub&gt;, Led&lt;sub&gt;gnd&lt;/sub&gt; and Led&lt;sub&gt;data&lt;/sub&gt;) and the digispark (Dig&lt;sub&gt;5v&lt;/sub&gt;, Dig&lt;sub&gt;gnd&lt;/sub&gt; and Dig&lt;sub&gt;pin#0&lt;/sub&gt;) are soldered as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B&lt;sub&gt;vcc&lt;/sub&gt; + Led&lt;sub&gt;vcc&lt;/sub&gt; + Dig&lt;sub&gt;5v&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;B&lt;sub&gt;gnd&lt;/sub&gt; + Led&lt;sub&gt;gnd&lt;/sub&gt; + Dig&lt;sub&gt;gnd&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Led&lt;sub&gt;data&lt;/sub&gt; + D&lt;sub&gt;pin#0&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Issues and TODOs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There is complete lack of an off-switch, and plugging and unplugging the battery is slightly messy. Especially in the unlit situations where these goggles would be fun to wear.&lt;/li&gt;
&lt;li&gt;The brightness is static and can only be changed by reflashing the AtTiny85. A potentiometer or button that toggles between different intensities (and possibly an OFF of sleep mode) would be very useful.&lt;/li&gt;
&lt;li&gt;The current head strap is made out of leather and is slightly hard to put on yourself.&lt;/li&gt;
&lt;li&gt;The glass is black which does make it very hard to see when it's dark. Since that is when the goggles are most fun to use, maybe the glass should be replaced.&lt;/li&gt;
&lt;/ul&gt;</content><category term="AtTiny85"></category><category term="Digispark"></category><category term="WS2812"></category><category term="WS2812B"></category><category term="goggles"></category></entry><entry><title>User friendly setup of ESP8266 gadgets</title><link href="http://memcpy.io/user-friendly-setup-of-esp8266-gadgets.html" rel="alternate"></link><published>2015-07-30T15:10:00+02:00</published><updated>2015-07-30T15:10:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-07-30:/user-friendly-setup-of-esp8266-gadgets.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-07-30_screenshot.png" title="Screenshot"&gt;&lt;/p&gt;
&lt;p&gt;The ESP8266 lacks a simple end-user compatible way to be configured with the login details of the local WiFi. Running the ESP8266 in a 'captive portal' mode where every http request is hijacked and replaced with form allows the end user to submit the credentials of the local WiFi hotspot by simply connecting to an ESP8266 hosted access point.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robertfoss/esp8266_nodemcu_wifi_setup"&gt;esp8266_nodemcu_wifi_setup&lt;/a&gt; is designed to provide a simple interface for users to configure their ESP8266/NodeMCU based devices through.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start ESP.&lt;/li&gt;
&lt;li&gt;Connect to the "SetupGadget" WiFi through your internet enabled thing of choice.&lt;/li&gt;
&lt;li&gt;Submit credentials of your local WiFi.&lt;/li&gt;
&lt;li&gt;The ESP reboots and connects to your local WiFi.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is this magic! How could a mere mortal like me summon features like this?!&lt;/h2&gt;
&lt;p&gt;Let me tell you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-07-30_screenshot.png" title="Screenshot"&gt;&lt;/p&gt;
&lt;p&gt;The ESP8266 lacks a simple end-user compatible way to be configured with the login details of the local WiFi. Running the ESP8266 in a 'captive portal' mode where every http request is hijacked and replaced with form allows the end user to submit the credentials of the local WiFi hotspot by simply connecting to an ESP8266 hosted access point.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robertfoss/esp8266_nodemcu_wifi_setup"&gt;esp8266_nodemcu_wifi_setup&lt;/a&gt; is designed to provide a simple interface for users to configure their ESP8266/NodeMCU based devices through.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start ESP.&lt;/li&gt;
&lt;li&gt;Connect to the "SetupGadget" WiFi through your internet enabled thing of choice.&lt;/li&gt;
&lt;li&gt;Submit credentials of your local WiFi.&lt;/li&gt;
&lt;li&gt;The ESP reboots and connects to your local WiFi.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is this magic! How could a mere mortal like me summon features like this?!&lt;/h2&gt;
&lt;p&gt;Let me tell you..&lt;/p&gt;
&lt;p&gt;By default DNS is not announced in the DHCP offer message, because a DNS server does not ship with NodeMCU.
In order to announce that the ESP8266 is running a DNS server, NodeMCU has to be recompiled to support that.
A guide to building NodeMCU can be found &lt;a href="http://memset.io/building-nodemcu-for-the-esp8266.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to the wonderful work of Andy Reischles on &lt;a href="https://github.com/reischle/CaptiveIntraweb/tree/dev"&gt;Captive Portal&lt;/a&gt;, a lua implementation of a domain hijacking DNS server exists. Which will allow an ESP8266 to redirect all traffic to itself.&lt;/p&gt;
&lt;h4&gt;Detailed guide&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In dhcpserver.h, #define USE_DNS 1&lt;/li&gt;
&lt;li&gt;Build NodeMCU.&lt;/li&gt;
&lt;li&gt;Flash NodeMCU.&lt;/li&gt;
&lt;li&gt;Upload all .lua files &lt;strong&gt;and&lt;/strong&gt; index.html.&lt;/li&gt;
&lt;li&gt;Reboot ESP.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What you need to do&lt;/h4&gt;
&lt;p&gt;After a user has connected throught the portal and sucessfully configured the the ESP8266 with the credentials of the local WiFi, something lua service should be started so that the ESP8266 actually does something.&lt;/p&gt;
&lt;p&gt;I would suggest adding something like this to init.lua:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dofile(&amp;quot;init_connected.lua&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where init_connected.lua is where your script resides.&lt;/p&gt;</content><category term="NodeMCU"></category><category term="ESP8266"></category><category term="Setup"></category></entry><entry><title>Building NodeMCU for the ESP8266</title><link href="http://memcpy.io/building-nodemcu-for-the-esp8266.html" rel="alternate"></link><published>2015-05-14T11:31:00+02:00</published><updated>2015-05-14T11:31:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2015-05-14:/building-nodemcu-for-the-esp8266.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-05-14_esp8266.jpg" title="ESP8266"&gt;&lt;/p&gt;
&lt;p&gt;This is a simple step-by-step guide to building and flashing NodeMCU for the ESP8266.&lt;/p&gt;
&lt;h3&gt;Build ESP8266 SDK&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install make unrar autoconf automake libtool gcc g++ gperf flex bison texinfo gawk ncurses-dev libexpat-dev python sed
cd /opt
git clone https://github.com/pfalcon/esp-open-sdk.git
cd esp-open-sdk
git submodule sync
git submodule update
make
export PATH=/opt/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Build NodeMCU&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/nodemcu/nodemcu-firmware.git
cd nodemcu-firmware
# Switch to dev branch, since it&amp;#39;s the most up to date
git checkout --track origin/dev
# Make INTEGER version, since it uses less memory/space
make EXTRA_CCFLAGS=&amp;quot;-DLUA_NUMBER_INTEGRAL&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flash NodeMCU&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;COMPORT=/dev/ttyUSB0 make flash
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Modifying NodeMCU to fit your needs&lt;/h3&gt;
&lt;h5&gt;app/include/user_modules.h&lt;/h5&gt;
&lt;p&gt;Contains a list of which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-05-14_esp8266.jpg" title="ESP8266"&gt;&lt;/p&gt;
&lt;p&gt;This is a simple step-by-step guide to building and flashing NodeMCU for the ESP8266.&lt;/p&gt;
&lt;h3&gt;Build ESP8266 SDK&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install make unrar autoconf automake libtool gcc g++ gperf flex bison texinfo gawk ncurses-dev libexpat-dev python sed
cd /opt
git clone https://github.com/pfalcon/esp-open-sdk.git
cd esp-open-sdk
git submodule sync
git submodule update
make
export PATH=/opt/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Build NodeMCU&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/nodemcu/nodemcu-firmware.git
cd nodemcu-firmware
# Switch to dev branch, since it&amp;#39;s the most up to date
git checkout --track origin/dev
# Make INTEGER version, since it uses less memory/space
make EXTRA_CCFLAGS=&amp;quot;-DLUA_NUMBER_INTEGRAL&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flash NodeMCU&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;COMPORT=/dev/ttyUSB0 make flash
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Modifying NodeMCU to fit your needs&lt;/h3&gt;
&lt;h5&gt;app/include/user_modules.h&lt;/h5&gt;
&lt;p&gt;Contains a list of which modules to include in the build.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
#define LUA_USE_MODULES_NODE
#define LUA_USE_MODULES_FILE
#define LUA_USE_MODULES_GPIO
#define LUA_USE_MODULES_WIFI
#define LUA_USE_MODULES_NET
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;app/include/user_config.h&lt;/h5&gt;
&lt;p&gt;Contains NodeMCU developer options, but could be of use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
#define DEVELOP_VERSION
#define NODE_ERROR
...
&lt;/pre&gt;&lt;/div&gt;</content><category term="NodeMCU"></category><category term="ESP8266"></category></entry></feed>