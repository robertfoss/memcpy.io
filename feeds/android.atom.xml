<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>memcpy.io - android</title><link href="https://memcpy.io/" rel="alternate"></link><link href="https://memcpy.io/feeds/android.atom.xml" rel="self"></link><id>https://memcpy.io/</id><updated>2019-04-01T18:07:00+02:00</updated><entry><title>Running Android next to Wayland</title><link href="https://memcpy.io/running-android-next-to-wayland.html" rel="alternate"></link><published>2019-04-01T18:07:00+02:00</published><updated>2019-04-01T18:07:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2019-04-01:/running-android-next-to-wayland.html</id><summary type="html">&lt;p&gt;Running Android has some advantages compared to native Linux applications,
for example with regard to the availability of applications and application
developers.&lt;/p&gt;
&lt;p&gt;For current non-Android systems, this work enables a path forward to running
Android applications in the same graphical environment as traditional non-Android
applications are run.&lt;/p&gt;
&lt;div style#"text-align:center;"&gt;
&lt;iframe width="830" height="460" src="https://www.youtube.com/embed/594fIHWQSj4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;What is SPURV?&lt;/h2&gt;
&lt;p&gt;SPURV is our experimental containerized Android environment, and
this is a quick overview of what it is.&lt;/p&gt;
&lt;h3&gt;Other Android Compatibility Layers&lt;/h3&gt;
&lt;p&gt;This means that Anbox which is LXC based, is different from SPURV in terms of
how hardware is accessed. The hardware access that Anbox provides in indirect,
and through the Qemu Pipes functionality, which is something it adopted from
the Android (goldfish) emulator.&lt;/p&gt;
&lt;p&gt;Shashlik and Genimobile are Android on Linux integration layers both based â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Running Android has some advantages compared to native Linux applications,
for example with regard to the availability of applications and application
developers.&lt;/p&gt;
&lt;p&gt;For current non-Android systems, this work enables a path forward to running
Android applications in the same graphical environment as traditional non-Android
applications are run.&lt;/p&gt;
&lt;div style#"text-align:center;"&gt;
&lt;iframe width="830" height="460" src="https://www.youtube.com/embed/594fIHWQSj4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;What is SPURV?&lt;/h2&gt;
&lt;p&gt;SPURV is our experimental containerized Android environment, and
this is a quick overview of what it is.&lt;/p&gt;
&lt;h3&gt;Other Android Compatibility Layers&lt;/h3&gt;
&lt;p&gt;This means that Anbox which is LXC based, is different from SPURV in terms of
how hardware is accessed. The hardware access that Anbox provides in indirect,
and through the Qemu Pipes functionality, which is something it adopted from
the Android (goldfish) emulator.&lt;/p&gt;
&lt;p&gt;Shashlik and Genimobile are Android on Linux integration layers both based on
Qemu, which means even better security properties than Anbox and certainly SPURV,
but at the cost of an even larger performance penalty.&lt;/p&gt;
&lt;h3&gt;Direct Hardware Access&lt;/h3&gt;
&lt;p&gt;SPURV is different from other Linux desktop integrations for Android
since it offers direct hardware access to the Android application.
This is a choice we made for performance reasons. But has drawbacks, especially
when it comes to security.&lt;br&gt;
Using direct hardware access does however grant us increased GPU and CPU
performance, which is important since we're targeting embedded platforms
which can have very limited resources.&lt;/p&gt;
&lt;h2&gt;Components&lt;/h2&gt;
&lt;p&gt;SPURV consists of a few different parts, all living in the same &lt;a href="https://gitlab.collabora.com/spurv/"&gt;project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="An overview of the SPURV stack" src="/images/2019_spurv.svg"&gt;&lt;/p&gt;
&lt;h3&gt;Android target device&lt;/h3&gt;
&lt;p&gt;This component integrates SPURV into Android, and it does so by using the
&lt;code&gt;device&lt;/code&gt; infrastructure that the Android codebase provides.&lt;/p&gt;
&lt;p&gt;Devices are normally used to customize an Android build to the
specific needs of a given hardware platform, like a new smartphone
SOC. In the case of SPURV, we're targeting being run inside of
a &lt;code&gt;systemd-nspawn&lt;/code&gt; container.&lt;/p&gt;
&lt;h3&gt;SPURV Audio&lt;/h3&gt;
&lt;p&gt;This component bridges the Android Audio Hardware Abtraction Layer (HAL) to
the host PulseAudio stack.&lt;/p&gt;
&lt;h3&gt;SPURV HWComposer&lt;/h3&gt;
&lt;p&gt;Integrates Android windows into Wayland. It does so by implementing a HWC-to-Wayland bridge.&lt;/p&gt;
&lt;p&gt;HWC is the Android API for implementing display &amp;amp; buffer management, and what it essentially
does in interpret all of the different display buffers that Android applications produce,
and organizes them into one cohesive Desktop.&lt;/p&gt;
&lt;p&gt;This protocol is conceptually not unlike the Wayland protocol, which allows for the HWC to
be translated into Wayland. This is essentially what the SPURV HWComposer does.&lt;/p&gt;
&lt;p&gt;Additionally it deals with input, like touch screen events and passes them along from Wayland
to Android, this however is unrelated to the HWC API.&lt;/p&gt;
&lt;h3&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;The SPURV Android target device behaves as a faux Android device, and tailors
the Android build to our requirements.&lt;/p&gt;
&lt;p&gt;Functions SPURV performs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customizes defaults.&lt;/li&gt;
&lt;li&gt;Configures network.&lt;/li&gt;
&lt;li&gt;Enables an audio bridge from Android to PulseAudio.&lt;/li&gt;
&lt;li&gt;Enables a graphics bridge from Android to Wayland.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How can I use it?&lt;/h2&gt;
&lt;p&gt;Full build instructions as can be found on our &lt;a href="https://gitlab.collabora.com/spurv/device_freedesktop/blob/master/spurv/README.md"&gt;GitLab&lt;/a&gt; for the &lt;a href="https://gitlab.collabora.com/spurv"&gt;SPURV project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An overview of setting up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch Android (AOSP) and the Linux kernel,&lt;/li&gt;
&lt;li&gt;Integrate SPURV into Android,&lt;/li&gt;
&lt;li&gt;Build Android &amp;amp; Linux Kernel,&lt;/li&gt;
&lt;li&gt;Build a debootstrap based root filesystem, and&lt;/li&gt;
&lt;li&gt;Flash Kernel, Android and root filesystem to the device of your choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What comes next?&lt;/h2&gt;
&lt;p&gt;The next few steps will be adding support for more hardware platforms
in our build scripts, but also optimizing the experience.&lt;/p&gt;
&lt;p&gt;In no particular order, this is what we would like to look at next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring-up on the i.MX8M with the etnaviv graphics driver.&lt;/li&gt;
&lt;li&gt;Slimming things down so it takes less time to start an app and consumes less
   RAM for the case where the goal is to just to run a single app.&lt;/li&gt;
&lt;li&gt;Bring-up on x86 with Ubuntu, publishing runtime binaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;The way SPURV is implemented means that a full OS is being run in a container,
which has implications both positive and negative.&lt;/p&gt;
&lt;p&gt;One of the positive effects is increased isolation of Android applications,
which means improved security and privacy for potentially untrusted applications.&lt;/p&gt;
&lt;p&gt;Additionally, this approach allows for Android applications to be run next to
Wayland based applications in a desktop environment.&lt;/p&gt;
&lt;p&gt;The downsides relate to hardware access and performance. All hardware access
that is needed by Android has to be passed into the container.
Besides manually having to configure such access using &lt;code&gt;systemd-nspawn&lt;/code&gt;,
there are also performance costs associated with running a container.
One part of this is the static cost of having to load an entire OS on top
of the base OS, but there are also additional runtime performance penalties
for applications in the container.&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pengutronix&lt;/li&gt;
&lt;li&gt;Kinetic&lt;/li&gt;
&lt;li&gt;Zodiac&lt;/li&gt;
&lt;li&gt;Boundary Devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="open source"></category><category term="graphics"></category><category term="wayland"></category><category term="android"></category><category term="3d"></category><category term="acceleration"></category></entry><entry><title>Running Android on the Mainline Graphics Stack @ FossNorth</title><link href="https://memcpy.io/running-android-on-the-mainline-graphics-stack-fossnorth.html" rel="alternate"></link><published>2018-04-23T00:00:00+02:00</published><updated>2018-04-23T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2018-04-23:/running-android-on-the-mainline-graphics-stack-fossnorth.html</id><summary type="html">&lt;p&gt;&lt;img alt="Intro slide" src="/images/2018-04-23_intro.png"&gt;&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2018-04-23/2018_fossnorth_running_android_on_mainline_gfx.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2018-04-23/2018_fossnorth_running_android_on_mainline_gfx.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="http://foss-north.se/2018/schedule.html"&gt;FossNorth&lt;/a&gt;, specifically &lt;a href="https://twitter.com/e8johan"&gt;@e8johan&lt;/a&gt;
for hosting a great event.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Intro slide" src="/images/2018-04-23_intro.png"&gt;&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2018-04-23/2018_fossnorth_running_android_on_mainline_gfx.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2018-04-23/2018_fossnorth_running_android_on_mainline_gfx.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="http://foss-north.se/2018/schedule.html"&gt;FossNorth&lt;/a&gt;, specifically &lt;a href="https://twitter.com/e8johan"&gt;@e8johan&lt;/a&gt;
for hosting a great event.&lt;/p&gt;</content><category term="talks"></category><category term="slides"></category><category term="fossnorth"></category><category term="foss"></category><category term="north"></category><category term="aosp"></category><category term="android"></category><category term="open"></category><category term="source"></category></entry><entry><title>Android on Mainline Graphics @ FOSDEM</title><link href="https://memcpy.io/android-on-mainline-graphics-fosdem.html" rel="alternate"></link><published>2018-02-04T00:00:00+01:00</published><updated>2018-02-04T00:00:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2018-02-04:/android-on-mainline-graphics-fosdem.html</id><summary type="html">&lt;p&gt;&lt;a href="https://fosdem.org"&gt;&lt;img alt="Alt text" src="/images/2018-02-04_fosdem.png" title="FOSDEM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A recording of the talk can be found &lt;a href="https://fosdem.org/2018/schedule/event/android_graphics/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2018-02-04/2018_fosdem_running_android_on_mainline_gfx.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2018-02-04/2018_fosdem_running_android_on_mainline_gfx.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers and volunteers of &lt;a href="https://fosdem.org/"&gt;FOSDEM&lt;/a&gt;, for hosting a great community event.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://fosdem.org"&gt;&lt;img alt="Alt text" src="/images/2018-02-04_fosdem.png" title="FOSDEM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A recording of the talk can be found &lt;a href="https://fosdem.org/2018/schedule/event/android_graphics/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2018-02-04/2018_fosdem_running_android_on_mainline_gfx.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2018-02-04/2018_fosdem_running_android_on_mainline_gfx.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers and volunteers of &lt;a href="https://fosdem.org/"&gt;FOSDEM&lt;/a&gt;, for hosting a great community event.&lt;/p&gt;</content><category term="fosdem"></category><category term="2018"></category><category term="brussels"></category><category term="android"></category><category term="aosp"></category><category term="talk"></category><category term="slides"></category><category term="conference"></category></entry><entry><title>Android on Mainline Graphics @ Embedded Linux Conference EU</title><link href="https://memcpy.io/android-on-mainline-graphics-embedded-linux-conference-eu.html" rel="alternate"></link><published>2017-10-25T00:00:00+02:00</published><updated>2017-10-25T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-10-25:/android-on-mainline-graphics-embedded-linux-conference-eu.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2017-10-25_speaking_photo.jpg" title="Speaking @ ELC EU"&gt;&lt;/p&gt;
&lt;p&gt;A recording of the talk can be found &lt;a href="https://www.youtube.com/watch?v=D9OUcQs0TnQ"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2017-10-25/2017_elc_running_android_on_mainline_gfx.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-10-25/2017_elc_running_android_on_mainline_gfx.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="https://osseu17.sched.com/"&gt;Embedded Linux Conference EU&lt;/a&gt;,
for hosting a great community event.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2017-10-25_speaking_photo.jpg" title="Speaking @ ELC EU"&gt;&lt;/p&gt;
&lt;p&gt;A recording of the talk can be found &lt;a href="https://www.youtube.com/watch?v=D9OUcQs0TnQ"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2017-10-25/2017_elc_running_android_on_mainline_gfx.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-10-25/2017_elc_running_android_on_mainline_gfx.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="https://osseu17.sched.com/"&gt;Embedded Linux Conference EU&lt;/a&gt;,
for hosting a great community event.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="talks"></category><category term="slides"></category><category term="embedded linux conference"></category><category term="elc"></category><category term="eu"></category><category term="prague"></category></entry><entry><title>drm_hwcomposer: A brief update @ XDC 20117</title><link href="https://memcpy.io/drm_hwcomposer-a-brief-update-xdc-20117.html" rel="alternate"></link><published>2017-09-22T00:00:00+02:00</published><updated>2017-09-22T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-09-22:/drm_hwcomposer-a-brief-update-xdc-20117.html</id><summary type="html">&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curios about the slides, you can download the &lt;a href="/files/2017-09-22/xdc_drm_hwcomposer.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-09-22/xdc_drm_hwcomposer.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="https://www.x.org/wiki/Events/XDC2017/"&gt;XDC&lt;/a&gt;,
and Google for hosting a great community event.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curios about the slides, you can download the &lt;a href="/files/2017-09-22/xdc_drm_hwcomposer.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-09-22/xdc_drm_hwcomposer.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="https://www.x.org/wiki/Events/XDC2017/"&gt;XDC&lt;/a&gt;,
and Google for hosting a great community event.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="talks"></category><category term="slides"></category><category term="xdc"></category><category term="x developers conference"></category></entry><entry><title>Android on Mainline Graphics @ Open Source Summit NA</title><link href="https://memcpy.io/android-on-mainline-graphics-open-source-summit-na.html" rel="alternate"></link><published>2017-09-11T00:00:00+02:00</published><updated>2017-09-11T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-09-11:/android-on-mainline-graphics-open-source-summit-na.html</id><summary type="html">&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2017-09-11/oss_na_2017_android_oss_graphics.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-09-11/oss_na_2017_android_oss_graphics.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="https://ossna2017.sched.com/"&gt;Open Source Summit NA&lt;/a&gt;,
for hosting a great community event.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curious about the slides, you can download the &lt;a href="/files/2017-09-11/oss_na_2017_android_oss_graphics.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-09-11/oss_na_2017_android_oss_graphics.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank the wonderful organizers of &lt;a href="https://ossna2017.sched.com/"&gt;Open Source Summit NA&lt;/a&gt;,
for hosting a great community event.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="talks"></category><category term="slides"></category><category term="open source summit"></category><category term="north america"></category><category term="oss na"></category><category term="ossna"></category></entry><entry><title>Android on Mainline Graphics @ GDG Berlin Android</title><link href="https://memcpy.io/android-on-mainline-graphics-gdg-berlin-android.html" rel="alternate"></link><published>2017-09-01T00:00:00+02:00</published><updated>2017-09-01T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-09-01:/android-on-mainline-graphics-gdg-berlin-android.html</id><summary type="html">&lt;p&gt;I would like to thank the wonderful organizers, &lt;a href="https://www.meetup.com/GDG-Berlin-Android"&gt;GDG Berlin Android&lt;/a&gt;,
for hosting a great community event.&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curios about the slides, you can download the &lt;a href="/files/2017-09-01/gdg_2017_android_oss_graphics.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-09-01/gdg_2017_android_oss_graphics.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I would like to thank the wonderful organizers, &lt;a href="https://www.meetup.com/GDG-Berlin-Android"&gt;GDG Berlin Android&lt;/a&gt;,
for hosting a great community event.&lt;/p&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;If you're curios about the slides, you can download the &lt;a href="/files/2017-09-01/gdg_2017_android_oss_graphics.pdf"&gt;PDF&lt;/a&gt; or
the &lt;a href="/files/2017-09-01/gdg_2017_android_oss_graphics.otp"&gt;OTP&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="imx6"></category><category term="talks"></category><category term="slides"></category><category term="GDG Berlin Android"></category></entry><entry><title>Android: NXP i.MX6 on Etnaviv Update</title><link href="https://memcpy.io/android-nxp-imx6-on-etnaviv-update.html" rel="alternate"></link><published>2017-07-21T00:00:00+02:00</published><updated>2017-07-21T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-07-21:/android-nxp-imx6-on-etnaviv-update.html</id><summary type="html">&lt;p&gt;Since the last post a lot work has gone into upstreaming and stabilizing the
etnaviv on Android ecosystem. This has involved Android, kernel and Mesa
changes. Many of which are available upstream now. A How-To for getting you
up and running on an iMX6 dev board is available &lt;a href="../android-getting-up-and-running-on-the-imx6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;h4&gt;Modifiers support&lt;/h4&gt;
&lt;p&gt;Modifiers support has been accepted into Mesa, GBM and gbm_gralloc.
Modifiers were mentioned in a &lt;a href="../android-nxp-imx6-buffer-modifier-support.html"&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Etnaviv driver support for Android&lt;/h4&gt;
&lt;p&gt;Patches enabling the etnaviv Mesa driver being built for Android have now
landed upstream.&lt;/p&gt;
&lt;h4&gt;Stability on Android&lt;/h4&gt;
&lt;p&gt;A number for small stability issues present while running Android on i.MX6
hardware have now been fixed, and the platform is now relatively stable.&lt;/p&gt;
&lt;h4&gt;Performance diagnostics&lt;/h4&gt;
&lt;p&gt;We have a decent understanding that the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since the last post a lot work has gone into upstreaming and stabilizing the
etnaviv on Android ecosystem. This has involved Android, kernel and Mesa
changes. Many of which are available upstream now. A How-To for getting you
up and running on an iMX6 dev board is available &lt;a href="../android-getting-up-and-running-on-the-imx6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;h4&gt;Modifiers support&lt;/h4&gt;
&lt;p&gt;Modifiers support has been accepted into Mesa, GBM and gbm_gralloc.
Modifiers were mentioned in a &lt;a href="../android-nxp-imx6-buffer-modifier-support.html"&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Etnaviv driver support for Android&lt;/h4&gt;
&lt;p&gt;Patches enabling the etnaviv Mesa driver being built for Android have now
landed upstream.&lt;/p&gt;
&lt;h4&gt;Stability on Android&lt;/h4&gt;
&lt;p&gt;A number for small stability issues present while running Android on i.MX6
hardware have now been fixed, and the platform is now relatively stable.&lt;/p&gt;
&lt;h4&gt;Performance diagnostics&lt;/h4&gt;
&lt;p&gt;We have a decent understanding that the platform is slow when running the desktop and other apps that have multiple surfaces due to rendering using CPU instead of GPU.&lt;/p&gt;
&lt;h4&gt;Etnaviv improvements&lt;/h4&gt;
&lt;p&gt;Etnaviv performance and feature set have both been increased since Mesa v17.1.&lt;/p&gt;
&lt;h4&gt;EGL support&lt;/h4&gt;
&lt;p&gt;A number of games using EGL have been successfully run on Android, some
minor graphical issues still remain, but overall games run well and fast.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This work is built on efforts by a lot people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleksander.es/"&gt;Aleksander Morgado&lt;/a&gt; - Independent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fooishbar.org/"&gt;Daniel Stone&lt;/a&gt; - Collabora&lt;/li&gt;
&lt;li&gt;&lt;a href="http://christian-gmeiner.info/"&gt;Christian Gmeiner&lt;/a&gt; - Independent&lt;/li&gt;
&lt;li&gt;Emil Velikov - Collabora&lt;/li&gt;
&lt;li&gt;Lucas Stach - Pengutronix&lt;/li&gt;
&lt;li&gt;Rob Herring - Linaro&lt;/li&gt;
&lt;li&gt;&lt;a href="https://varadgautam.wordpress.com/"&gt;Varad Gautam&lt;/a&gt; - Collabora&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laanwj.github.io/"&gt;Wladimir Van Der Laan&lt;/a&gt; - Independent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;,
and has been funded by &lt;a href="http://zii.aero"&gt;Zodiac Inflight Innovations&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="imx6"></category><category term="sabre"></category><category term="vivante"></category><category term="etnaviv"></category><category term="linux"></category><category term="collabora"></category></entry><entry><title>GALLIUM_HUD: Debug Mesa Graphics Performance</title><link href="https://memcpy.io/gallium_hud-debug-mesa-graphics-performance.html" rel="alternate"></link><published>2017-06-28T00:00:00+02:00</published><updated>2017-06-28T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-06-28:/gallium_hud-debug-mesa-graphics-performance.html</id><summary type="html">&lt;h2&gt;GALLIUM_HUD&lt;/h2&gt;
&lt;p&gt;GALLIUM_HUD is a feature that adds performance graphs to applications that describe
various aspects like FPS, CPU usage, etc in realtime.&lt;/p&gt;
&lt;p&gt;It is enabled using an environment variable, GALLIUM_HUD, that can be set for GL/EGL/etc
applications. It only works for Mesa drivers that are Gallium based, which means that
the most drivers (with the notable exception of some Intel drivers) support GALLIUM_HUD.&lt;/p&gt;
&lt;p&gt;See GALLIUM_HUD options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GALLIUM_HUD=help
glxgears
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Android&lt;/h3&gt;
&lt;p&gt;If you're building Android, you can supply system-wide environment values by doing an
export in the init.rc file of the device you are using, like 
&lt;a href="https://customer-git.collabora.com/cgit/android-etnaviv/android-device-linaro-generic.git/commit/?h=android-etnaviv&amp;amp;id=48755378c388707260a8bb50e0fb62a309ded986"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Go to android source code checkout
cd android

# Add export to init.rc (linaro/generic is the device I use)
nano device/linaro/generic/init â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;GALLIUM_HUD&lt;/h2&gt;
&lt;p&gt;GALLIUM_HUD is a feature that adds performance graphs to applications that describe
various aspects like FPS, CPU usage, etc in realtime.&lt;/p&gt;
&lt;p&gt;It is enabled using an environment variable, GALLIUM_HUD, that can be set for GL/EGL/etc
applications. It only works for Mesa drivers that are Gallium based, which means that
the most drivers (with the notable exception of some Intel drivers) support GALLIUM_HUD.&lt;/p&gt;
&lt;p&gt;See GALLIUM_HUD options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GALLIUM_HUD=help
glxgears
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Android&lt;/h3&gt;
&lt;p&gt;If you're building Android, you can supply system-wide environment values by doing an
export in the init.rc file of the device you are using, like 
&lt;a href="https://customer-git.collabora.com/cgit/android-etnaviv/android-device-linaro-generic.git/commit/?h=android-etnaviv&amp;amp;id=48755378c388707260a8bb50e0fb62a309ded986"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Go to android source code checkout
cd android

# Add export to init.rc (linaro/generic is the device I use)
nano device/linaro/generic/init.rc
export GALLIUM_HUD cpu,cpu0+cpu1+cpu2+cpu3;pixels-rendered,fps,primitives-generated
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;If you're using one of the usual Linux distros, GALLIUM_HUD can be enabled by setting
the environtment variable in a place that it loaded early.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Add export to /etc/environment
nano /etc/environment 
export GALLIUM_HUD cpu,cpu0+cpu1+cpu2+cpu3;pixels-rendered,fps,primitives-generated
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="linux"></category><category term="mesa"></category><category term="gallium"></category><category term="hud"></category><category term="peformance"></category><category term="diagnostics"></category><category term="debug"></category><category term="collabora"></category></entry><entry><title>Android: NXP i.MX6 Buffer Modifier Support</title><link href="https://memcpy.io/android-nxp-imx6-buffer-modifier-support.html" rel="alternate"></link><published>2017-06-02T00:00:00+02:00</published><updated>2017-06-02T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-06-02:/android-nxp-imx6-buffer-modifier-support.html</id><summary type="html">&lt;iframe width="100%" height="380" src="https://www.youtube.com/embed/Dn7hOa9WiYk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;With modifier support added to Mesa and gbm_gralloc, it is now possible to boot Android on iMX6
platforms using no proprietary blobs at all.
This makes iMX6 one of the very few embedded SOCs that needs no blobs at all to run a full graphics stack.&lt;/p&gt;
&lt;p&gt;Not only is that a great win for Open Source in general, but it also makes the iMX6 more attractive as a platform.
A further positive point is that this lays the groundwork for the iMX8 platform, and supporting it will come much easier.&lt;/p&gt;
&lt;h2&gt;What are modifiers used for?&lt;/h2&gt;
&lt;p&gt;Modifiers are used to represent different properties of buffers. These properties can cover a range of
different information about a buffer, for example compression and &lt;a href="https://github.com/laanwj/etna_viv/blob/master/doc/hardware.md#texture-tiling"&gt;tiling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the case of â€¦&lt;/p&gt;</summary><content type="html">&lt;iframe width="100%" height="380" src="https://www.youtube.com/embed/Dn7hOa9WiYk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;With modifier support added to Mesa and gbm_gralloc, it is now possible to boot Android on iMX6
platforms using no proprietary blobs at all.
This makes iMX6 one of the very few embedded SOCs that needs no blobs at all to run a full graphics stack.&lt;/p&gt;
&lt;p&gt;Not only is that a great win for Open Source in general, but it also makes the iMX6 more attractive as a platform.
A further positive point is that this lays the groundwork for the iMX8 platform, and supporting it will come much easier.&lt;/p&gt;
&lt;h2&gt;What are modifiers used for?&lt;/h2&gt;
&lt;p&gt;Modifiers are used to represent different properties of buffers. These properties can cover a range of
different information about a buffer, for example compression and &lt;a href="https://github.com/laanwj/etna_viv/blob/master/doc/hardware.md#texture-tiling"&gt;tiling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the case of the iMX6 and the Vivante GPU which it is equipped with, the modifiers are related to tiling.
The reason being that buffers can be tiled in different ways (Tiled, Super Tiled, etc.) or not at all (Linear).
Before sending buffers out to a display, they need to have the associated tiling information made available,
so that the actual image that is being sent out is not tiled.&lt;/p&gt;
&lt;h2&gt;How was support added?&lt;/h2&gt;
&lt;p&gt;Support was added in two places; Mesa and gbm_gralloc. Mesa has had support added to many of the buffer allocation
functions and to GBM (which is the API provided by Mesa, that gbm_gralloc uses).&lt;/p&gt;
&lt;p&gt;gbm_gralloc in turn had support added for using a new GBM API call, GBM_BO_IMPORT_FD_MODIFIER, which imports
a buffer object as well as accompanying information like modifier used by the buffer object in question.&lt;/p&gt;
&lt;h2&gt;Getting up and running&lt;/h2&gt;
&lt;p&gt;Currently the modifiers work is in the process of being upstreamed, but in the meantime it can be
found &lt;a href="https://customer-git.collabora.com/cgit/android-etnaviv/"&gt;here&lt;/a&gt;. If you'd like to test
this out yourself a How-To can be found &lt;a href="../android-getting-up-and-running-on-the-imx6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This work is built on the efforts of a lot people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://varadgautam.wordpress.com/"&gt;Varad Gautam&lt;/a&gt; - Collabora&lt;/li&gt;
&lt;li&gt;Lucas Stach - Pengutronix&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.tomeuvizoso.net/"&gt;Tomeu Vizoso&lt;/a&gt; - Collabora&lt;/li&gt;
&lt;li&gt;Rob Herring - Linaro&lt;/li&gt;
&lt;li&gt;Emil Velikov - Collabora&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.christian-gmeiner.info/"&gt;Christian Gmeiner&lt;/a&gt; - Independent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laanwj.github.io/"&gt;Wladimir Van Der Laan&lt;/a&gt; - Independent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;,
and has been funded by &lt;a href="http://zii.aero"&gt;Zodiac Inflight Innovations&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="imx6"></category><category term="vivante"></category><category term="etnaviv"></category><category term="linux"></category><category term="mesa"></category><category term="tiling"></category><category term="modifier"></category><category term="collabora"></category></entry><entry><title>Android: Getting up and running on the iMX6</title><link href="https://memcpy.io/android-getting-up-and-running-on-the-imx6.html" rel="alternate"></link><published>2017-04-27T00:00:00+02:00</published><updated>2017-04-27T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-04-27:/android-getting-up-and-running-on-the-imx6.html</id><summary type="html">&lt;p&gt;Since the hardware very much matters this is going to be divided into a few parts, the common steps and the hardware specific ones.&lt;/p&gt;
&lt;p&gt;This post is a bit of a living document and will be changed over time, and if you have any questions about it, please reach out through email (robert.foss at collabora.com) or irc (tomeu or robertfoss on #dri-devel on freenode).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Changelog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;
&lt;span class="mi"&gt;2017 â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Since the hardware very much matters this is going to be divided into a few parts, the common steps and the hardware specific ones.&lt;/p&gt;
&lt;p&gt;This post is a bit of a living document and will be changed over time, and if you have any questions about it, please reach out through email (robert.foss at collabora.com) or irc (tomeu or robertfoss on #dri-devel on freenode).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Changelog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;setup_sdcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;etnaviv&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;sabrelite&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;lzop&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common steps&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Install dependencies
sudo apt install u-boot-tools gcc-arm-linux-gnueabihf openjdk-8-jdk android-tools-fsutils python-mako git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip lzop

mkdir /opt/android
cd /opt/android
repo init -u https://android.googlesource.com/platform/manifest -b android-7.1.1_r28
cd /opt/android/.repo
git clone https://customer-git.collabora.com/git/android-etnaviv/android_manifest.git local_manifests -b android-etnaviv
repo sync -j10

mkdir /opt/imx6_android
cd /opt/imx6_android

# Fetch Kconfig, bootloaders and some scripts
git clone https://customer-git.collabora.com/git/android-etnaviv/android-etnaviv.git .

# Fetch the Linux Kernel
git clone https://customer-git.collabora.com/git/android-etnaviv/linux.git -b android-etnaviv

# This will destroy all data on /dev/mmcblk0 and
# create boot/system/cache/data partitions
./setup_sdcard.sh -b /dev/mmcblk0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hardware: iMX6 Sabre&lt;/h2&gt;
&lt;h3&gt;Build Android and Linux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Build android, the kernel, and flash it onto an SD-card
# Run build_android with the correct -d flag
./build_android.sh -b /dev/mmcblk0 -d imx6q-sabre
./build_android.sh -b /dev/mmcblk0 -d imx6qp-sabre
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start Android&lt;/h3&gt;
&lt;p&gt;The SD-card can now be put into the SD3 slot and
the device can be restarted.&lt;/p&gt;
&lt;h2&gt;Hardware: iMX6 Sabrelite&lt;/h2&gt;
&lt;h3&gt;Build Android and Linux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Build android, the kernel, and flash it onto an SD-card
# Run build_android with the correct -d flag
./build_android.sh -b /dev/mmcblk0 -d imx6q-sabrelite
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start Android&lt;/h3&gt;
&lt;p&gt;The micro-sd card can now be put into the micro-sd slot and
the device can be restarted.&lt;/p&gt;
&lt;h2&gt;Hardware: RDU2&lt;/h2&gt;
&lt;h3&gt;Build Android and Linux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Build android, the kernel, and flash it onto an SD-card
# Run build_android with the correct -d flag
./build_android.sh -b /dev/mmcblk0 -d imx6q-zii-rdu2
./build_android.sh -b /dev/mmcblk0 -d imx6qp-zii-rdu2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install the bootloader&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Depending if you have a &amp;gt;=13&amp;quot; version of the RDU2
# use the imx6qp, if &lt;span class="nt"&gt;&amp;lt;13&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;then&lt;/span&gt; &lt;span class="err"&gt;use&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;imx6q&lt;/span&gt;

&lt;span class="na"&gt;IMX6_TYPE=&lt;/span&gt;&lt;span class="s"&gt;imx6q&lt;/span&gt;
&lt;span class="na"&gt;IMX6_TYPE=&lt;/span&gt;&lt;span class="s"&gt;imx6qp&lt;/span&gt;
&lt;span class="na"&gt;BAREBOX=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zodiac/barebox-zii-&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;IMX6_TYPE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-rdu2.img&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Flash&lt;/span&gt; &lt;span class="err"&gt;bootloader&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt;
&lt;span class="err"&gt;dd&lt;/span&gt; &lt;span class="na"&gt;if=&lt;/span&gt;&lt;span class="s"&gt;${BAREBOX}&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;/dev/mmcblk0&lt;/span&gt; &lt;span class="na"&gt;bs=&lt;/span&gt;&lt;span class="s"&gt;1k&lt;/span&gt;
&lt;span class="err"&gt;sync&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Put&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt; &lt;span class="err"&gt;in&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;middle-most&lt;/span&gt; &lt;span class="err"&gt;slot&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;RDU2&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Install&lt;/span&gt; &lt;span class="err"&gt;lrzsz,&lt;/span&gt; &lt;span class="err"&gt;since&lt;/span&gt; &lt;span class="err"&gt;it&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;used&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;ymodem&lt;/span&gt; &lt;span class="err"&gt;upload&lt;/span&gt;
&lt;span class="err"&gt;sudo&lt;/span&gt; &lt;span class="err"&gt;apt&lt;/span&gt; &lt;span class="err"&gt;install&lt;/span&gt; &lt;span class="err"&gt;lrzsz&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;serial&lt;/span&gt; &lt;span class="err"&gt;device&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB2&lt;/span&gt; &lt;span class="err"&gt;and&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt; &lt;span class="err"&gt;with&lt;/span&gt; &lt;span class="err"&gt;minicom&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;The&lt;/span&gt; &lt;span class="err"&gt;numbering&lt;/span&gt; &lt;span class="err"&gt;assumes&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;RDU2&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;only&lt;/span&gt; &lt;span class="err"&gt;serial&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;serial&lt;/span&gt; &lt;span class="err"&gt;device&lt;/span&gt; &lt;span class="err"&gt;connected&lt;/span&gt;
&lt;span class="err"&gt;sudo&lt;/span&gt; &lt;span class="err"&gt;minicom&lt;/span&gt; &lt;span class="err"&gt;-s&lt;/span&gt;
    &lt;span class="err"&gt;+------------------------------------------+&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;A&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;    &lt;span class="err"&gt;Serial&lt;/span&gt; &lt;span class="err"&gt;Device&lt;/span&gt;      &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;B&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Lockfile&lt;/span&gt; &lt;span class="err"&gt;Location&lt;/span&gt;     &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;/var/lock&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;C&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;   &lt;span class="err"&gt;Callin&lt;/span&gt; &lt;span class="err"&gt;Program&lt;/span&gt;      &lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;D&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;  &lt;span class="err"&gt;Callout&lt;/span&gt; &lt;span class="err"&gt;Program&lt;/span&gt;      &lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;E&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;    &lt;span class="err"&gt;Bps/Par/Bits&lt;/span&gt;       &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;115200&lt;/span&gt; &lt;span class="err"&gt;8N1&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;F&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Hardware&lt;/span&gt; &lt;span class="err"&gt;Flow&lt;/span&gt; &lt;span class="err"&gt;Control&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;No&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;G&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Software&lt;/span&gt; &lt;span class="err"&gt;Flow&lt;/span&gt; &lt;span class="err"&gt;Control&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;No&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt;
    &lt;span class="err"&gt;|&lt;/span&gt;    &lt;span class="err"&gt;Change&lt;/span&gt; &lt;span class="err"&gt;which&lt;/span&gt; &lt;span class="err"&gt;setting?&lt;/span&gt;
    &lt;span class="err"&gt;+------------------------------------------+&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;Quark&lt;/span&gt; &lt;span class="err"&gt;console&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Set&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;source&lt;/span&gt; 
&lt;span class="err"&gt;#HostBoot&lt;/span&gt; &lt;span class="err"&gt;s&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;
&lt;span class="err"&gt;reset&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Restart&lt;/span&gt; &lt;span class="err"&gt;device,&lt;/span&gt; &lt;span class="err"&gt;connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;barebox&lt;/span&gt; &lt;span class="err"&gt;loaded&lt;/span&gt; &lt;span class="err"&gt;just&lt;/span&gt; &lt;span class="err"&gt;loaded&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;from&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB2&lt;/span&gt;
&lt;span class="err"&gt;pic_setwdt&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;
&lt;span class="err"&gt;loady&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Using&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;minicom&lt;/span&gt; &lt;span class="err"&gt;quickly&lt;/span&gt; &lt;span class="err"&gt;initiate&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;ymodem&lt;/span&gt; &lt;span class="err"&gt;file&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;same&lt;/span&gt; &lt;span class="err"&gt;barebox&lt;/span&gt; &lt;span class="err"&gt;image&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;wrote&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;SD-card&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Be&lt;/span&gt; &lt;span class="err"&gt;quick,&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;upload&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;timeout&lt;/span&gt; &lt;span class="err"&gt;after&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;few&lt;/span&gt; &lt;span class="err"&gt;seconds&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Write&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;bootloader&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;SPI&lt;/span&gt; &lt;span class="err"&gt;NOR&lt;/span&gt;
&lt;span class="err"&gt;erase&lt;/span&gt; &lt;span class="err"&gt;/dev/m25p0.barebox&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Depending&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;RDU2&lt;/span&gt; &lt;span class="err"&gt;type&lt;/span&gt; &lt;span class="err"&gt;flash&lt;/span&gt; &lt;span class="err"&gt;one&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;following&lt;/span&gt;
&lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="err"&gt;barebox-zii-imx6q-rdu2.img&lt;/span&gt; &lt;span class="err"&gt;/dev/m25p0.barebox&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Or&lt;/span&gt;
&lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="err"&gt;barebox-zii-imx6qp-rdu2.img&lt;/span&gt; &lt;span class="err"&gt;/dev/m25p0.barebox&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;Quark&lt;/span&gt; &lt;span class="err"&gt;console&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB3&lt;/span&gt; &lt;span class="err"&gt;again&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Set&lt;/span&gt; &lt;span class="err"&gt;SPI&lt;/span&gt; &lt;span class="err"&gt;NOR&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;source&lt;/span&gt;
&lt;span class="err"&gt;#HostBoot&lt;/span&gt; &lt;span class="err"&gt;s&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;
&lt;span class="err"&gt;reset&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Connect&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;barebox&lt;/span&gt; &lt;span class="err"&gt;console&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt; &lt;span class="err"&gt;/dev/ttyUSB2&lt;/span&gt; &lt;span class="err"&gt;again&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Edit&lt;/span&gt; &lt;span class="err"&gt;configuration&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;automatically&lt;/span&gt; &lt;span class="err"&gt;boot&lt;/span&gt; &lt;span class="err"&gt;from&lt;/span&gt; &lt;span class="err"&gt;mmc:&lt;/span&gt;
&lt;span class="err"&gt;sedit&lt;/span&gt; &lt;span class="err"&gt;/env/config&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.boot.&lt;/span&gt;&lt;span class="na"&gt;default=&lt;/span&gt;&lt;span class="s"&gt;/env/boot/mmc&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.bootm.&lt;/span&gt;&lt;span class="na"&gt;image=&lt;/span&gt;&lt;span class="s"&gt;/mnt/mmc1.0/android_zImage&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.bootm.&lt;/span&gt;&lt;span class="na"&gt;initrd=&lt;/span&gt;&lt;span class="s"&gt;/mnt/mmc1.0/android_ramdisk.img.gz&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.bootm.&lt;/span&gt;&lt;span class="na"&gt;oftree=&lt;/span&gt;&lt;span class="s"&gt;/mnt/mmc1.0/imx6qp-zii-rdu2.dtb&lt;/span&gt;
&lt;span class="err"&gt;export&lt;/span&gt; &lt;span class="err"&gt;global.linux.bootargs.&lt;/span&gt;&lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;console=ttymxc0,115200 console=tty0 rw rootwait ip=dhcp buildvariant=userdebug debug ignore_loglevel root=/dev/mmcblk0p2 rootfstype=ext4 rootwait init=/init printk.devkmsg=on verbose enforcing=0 androidboot.selinux=permissive drm.debug=0x00&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;sedit&lt;/span&gt; &lt;span class="err"&gt;/env/boot/mmc&lt;/span&gt;
&lt;span class="err"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="err"&gt;detect&lt;/span&gt; &lt;span class="err"&gt;mmc1&lt;/span&gt;
&lt;span class="err"&gt;mkdir&lt;/span&gt; &lt;span class="err"&gt;-p&lt;/span&gt; &lt;span class="err"&gt;/mnt/mmc1.0&lt;/span&gt;
&lt;span class="err"&gt;automount&lt;/span&gt; &lt;span class="err"&gt;-d&lt;/span&gt; &lt;span class="err"&gt;/mnt/mmc1.0&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;mount&lt;/span&gt; &lt;span class="err"&gt;/dev/mmc1.0&lt;/span&gt; &lt;span class="err"&gt;/mnt/mmc1.0&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;bootm&lt;/span&gt;

&lt;span class="err"&gt;pic_setwdt&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;     &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Disable&lt;/span&gt; &lt;span class="err"&gt;watchdog&lt;/span&gt;

&lt;span class="err"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start Android&lt;/h3&gt;
&lt;p&gt;The SD-card created in the common steps can now be put into
the middlemost slot and the device can be restarted.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This work is built on efforts by a lot people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pengutronix who's been doing i.MX6 platform work.&lt;/li&gt;
&lt;li&gt;Christian Gmeiner, Wladimir Van Der Laan, and the other etanviv developers.&lt;/li&gt;
&lt;li&gt;Rob Herring at Linaro for getting the ball rolling with AOSP for Zii.&lt;/li&gt;
&lt;li&gt;Andrey Smirnov for driver support for the RDU2 such as i.MX6 PCI, ARM PL310 L2 Cache controller, RTC, and other i.MX6qp driver fixups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="imx6"></category><category term="sabre"></category><category term="rdu2"></category><category term="vivante"></category><category term="etnaviv"></category><category term="linux"></category><category term="collabora"></category></entry><entry><title>Android: Changing the bootanimation</title><link href="https://memcpy.io/android-changing-the-bootanimation.html" rel="alternate"></link><published>2017-04-20T00:00:00+02:00</published><updated>2017-04-20T00:00:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-04-20:/android-changing-the-bootanimation.html</id><summary type="html">&lt;p&gt;There exists &lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/cmds/bootanimation/FORMAT.md"&gt;official documentation&lt;/a&gt;
for how to create a custom boot animation, but unfortunately it is lacking
in actual examples.&lt;/p&gt;
&lt;p&gt;So this guide is a bit more hands on.&lt;/p&gt;
&lt;h2&gt;Structure of bootanimation.zip&lt;/h2&gt;
&lt;p&gt;Without covering too much of the same gound as the documentation,
let's have a quick look at what is in a simple bootanimation.zip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la bootanimation
total &lt;span class="m"&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 .
drwxr-xr-x &lt;span class="m"&gt;8&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna   &lt;span class="m"&gt;92&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:21 desc.txt
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:44 part0
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:45 part1

$ cat bootanimation/desc.txt 
&lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;1080&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;         &lt;span class="c1"&gt;# WIDTH HEIGHT FPS&lt;/span&gt;
c &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; part0 â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;There exists &lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/cmds/bootanimation/FORMAT.md"&gt;official documentation&lt;/a&gt;
for how to create a custom boot animation, but unfortunately it is lacking
in actual examples.&lt;/p&gt;
&lt;p&gt;So this guide is a bit more hands on.&lt;/p&gt;
&lt;h2&gt;Structure of bootanimation.zip&lt;/h2&gt;
&lt;p&gt;Without covering too much of the same gound as the documentation,
let's have a quick look at what is in a simple bootanimation.zip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la bootanimation
total &lt;span class="m"&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 .
drwxr-xr-x &lt;span class="m"&gt;8&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:39 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna   &lt;span class="m"&gt;92&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:21 desc.txt
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:44 part0
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:45 part1

$ cat bootanimation/desc.txt 
&lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;1080&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;         &lt;span class="c1"&gt;# WIDTH HEIGHT FPS&lt;/span&gt;
c &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; part0 FFFFFF  &lt;span class="c1"&gt;# TYPE COUNT PAUSE PATH [#RGBHEX] [CLOCK]&lt;/span&gt;
c &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; part1 FFFFFF  &lt;span class="c1"&gt;# TYPE COUNT PAUSE PATH [#RGBHEX] [CLOCK]&lt;/span&gt;

ls -la bootanimation/part0 
total &lt;span class="m"&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; hottuna hottuna  &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:44 .
drwxr-xr-x &lt;span class="m"&gt;6&lt;/span&gt; hottuna hottuna  &lt;span class="m"&gt;4096&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:40 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0000&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0001&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0002&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 &lt;span class="m"&gt;0003&lt;/span&gt;.png
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; hottuna hottuna &lt;span class="m"&gt;10688&lt;/span&gt; Apr &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:31 XXXX.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the "#" comments are mine and not actually present in the files.&lt;/p&gt;
&lt;p&gt;An important thing to note with the zip file is needs to have compression
turned off.&lt;/p&gt;
&lt;h2&gt;Switch bootanimation&lt;/h2&gt;
&lt;p&gt;Download &lt;a href="/files/2017-04-20/bootanimation.zip"&gt;bootanimation.zip&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unzip bootanimation.zip
cd bootanimation
# Edit desc.txt and partN folders to your needs
zip -0qry -i \*.txt \*.png \*.wav @ ../bootanimation.zip *.txt part*

# Option 1, use adb to send bootanimation.zip
adb root
adb remount
adb push bootanimation.zip /system/media/bootanimation.zip

# Option 2, bake bootanimation.zip into your AOSP build
cp bootanimation.zip /opt/aosp/out/target/product/linaro_arm/system/bootanimation.zip
./your_favorite_buildscript_here.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/cmds/bootanimation/FORMAT.md"&gt;bootanimation documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="bootanimation"></category><category term="boot"></category><category term="animation"></category><category term="collabora"></category></entry><entry><title>Android: Enabling mainline graphics</title><link href="https://memcpy.io/android-enabling-mainline-graphics.html" rel="alternate"></link><published>2017-03-28T15:18:00+02:00</published><updated>2017-03-28T15:18:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-03-28:/android-enabling-mainline-graphics.html</id><summary type="html">&lt;p&gt;The  &lt;a href="https://source.android.com/devices/graphics/implement-hwc.html"&gt;HWC&lt;/a&gt; 
(Hardware Composer) API is used by SurfaceFlinger for compositing layers to the screen.
The HWC abstracts objects such as overlays and 2D blitters and helps offload some work
that would normally be done with OpenGL.
SurfaceFlinger on the other hand accepts buffers from multiple sources, composites them,
and sends them to the display.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-03-28_android_graphics_stack.png"&gt;&lt;img alt="Alt text" src="/images/2017-03-28_android_graphics_stack.png" title="Android Graphics Stack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above graphic depicts the traditional Android graphics stack.&lt;/p&gt;
&lt;p&gt;This is where drm_hwcomposer comes into play. Since the mainline kernel graphics stack
doesn't offer the HWC API, drm_hwcomposer is introduced to interface with the mainline
graphics stack through mesa and libdrm. Before this work drm_hwcomposer only offered the
HWC1 API.
Since Android 7.0 version 2 of the HWC API is used by SurfaceFlinger. HWC2 differs in a few
ways â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The  &lt;a href="https://source.android.com/devices/graphics/implement-hwc.html"&gt;HWC&lt;/a&gt; 
(Hardware Composer) API is used by SurfaceFlinger for compositing layers to the screen.
The HWC abstracts objects such as overlays and 2D blitters and helps offload some work
that would normally be done with OpenGL.
SurfaceFlinger on the other hand accepts buffers from multiple sources, composites them,
and sends them to the display.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/2017-03-28_android_graphics_stack.png"&gt;&lt;img alt="Alt text" src="/images/2017-03-28_android_graphics_stack.png" title="Android Graphics Stack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above graphic depicts the traditional Android graphics stack.&lt;/p&gt;
&lt;p&gt;This is where drm_hwcomposer comes into play. Since the mainline kernel graphics stack
doesn't offer the HWC API, drm_hwcomposer is introduced to interface with the mainline
graphics stack through mesa and libdrm. Before this work drm_hwcomposer only offered the
HWC1 API.
Since Android 7.0 version 2 of the HWC API is used by SurfaceFlinger. HWC2 differs in a few
ways from the previous version, for example the semantics of fence support were changed and
the GPU can now be used as a fallback when compositing layers.&lt;/p&gt;
&lt;p&gt;Up until recently the mainline kernel lacked the fence primitive offered by Android
used in HWC1 and HWC2. But after my fellow Collaboran Gustavo Padovan's work on
&lt;a href="http://padovan.org/blog/2016/09/mainline-explicit-fencing-part-1/"&gt;adding fence support&lt;/a&gt;
to the mainline kernel was upstreamed in
&lt;a href="http://padovan.org/blog/2017/02/collabora-contributions-to-linux-kernel-4-10/"&gt;v4.10&lt;/a&gt;,
the mainline kernel now has fence support equivalent to that of Android.&lt;/p&gt;
&lt;p&gt;The new fence support enabled work on drm_hwcomposer to add HWC2 support.
And with it we are now able to boot Android on the db410c running the freedreno driver.
But in theory it should work on any mainline kernel graphics stack enabled GPU.&lt;/p&gt;
&lt;p&gt;Currently the work is being upstreamed to the
&lt;a href="https://chromium.googlesource.com/chromiumos/drm_hwcomposer/"&gt;ChromiumOS repo&lt;/a&gt;
which is the official upstream for drm_hwcomposer.&lt;/p&gt;
&lt;p&gt;A number of projects have seen contributions 8in order to enable this work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kernel - sync_file, in-fence and out-fence support added.&lt;/li&gt;
&lt;li&gt;libdrm - fence support added.&lt;/li&gt;
&lt;li&gt;mesa - support for passing fences added.&lt;/li&gt;
&lt;li&gt;intel-gpu-tools - sync and fence tests added.&lt;/li&gt;
&lt;li&gt;drm_hwcomposer - HWC2 and fence support added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This drm_hwcomposer work is part of a long-standing collaboration between
Google's ChromeOS team and Collabora.&lt;/p&gt;
&lt;p&gt;A number of people have played an important role in this work:
Gustavo Padovan, Rob Clark, Sean Paul, Zach Reizner and Rob Herring.&lt;/p&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="android"></category><category term="aosp"></category><category term="graphics"></category><category term="drm"></category><category term="drm_hwcomposer"></category><category term="hwcomposer"></category><category term="hwc2"></category><category term="collabora"></category></entry><entry><title>Precompiling APK files during Android AOSP build</title><link href="https://memcpy.io/precompiling-apk-files-during-android-aosp-build.html" rel="alternate"></link><published>2017-02-22T16:55:00+01:00</published><updated>2017-02-22T16:55:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2017-02-22:/precompiling-apk-files-during-android-aosp-build.html</id><summary type="html">&lt;h2&gt;Enable precompilation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /opt/aosp_checkout/

find . -name BoardConfig.mk
./device/huawei/angler/BoardConfig.mk
./device/generic/mini-emulator-x86/BoardConfig.mk
./device/generic/arm64/BoardConfig.mk
./device/generic/mini-emulator-x86_64/BoardConfig.mk
./device/generic/mini-emulator-armv7-a-neon/BoardConfig.mk
./device/generic/mips/BoardConfig.mk
./device/generic/mips64/BoardConfig.mk
./device/generic/x86_64/BoardConfig.mk
./device/generic/mini-emulator-arm64/BoardConfig.mk
./device/generic/mini-emulator-mips/BoardConfig.mk
./device/generic/x86/BoardConfig.mk
./device/generic/armv7-a-neon/BoardConfig.mk
./device/generic/mini-emulator-mips64/BoardConfig.mk
./device/lge/bullhead/BoardConfig.mk
./device/linaro/generic/linaro_x86_64_only/BoardConfig.mk
./device/linaro/generic/linaro_arm64/BoardConfig.mk
./device/linaro/generic/linaro_arm64_only/BoardConfig.mk
./device/linaro/generic/linaro_x86_64/BoardConfig.mk
./device/linaro/generic/BoardConfig.mk
./device/linaro/generic/linaro_arm/BoardConfig.mk
./device/linaro/hikey/hikey/BoardConfig.mk

# Edit the BoardConfig.mk that â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Enable precompilation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /opt/aosp_checkout/

find . -name BoardConfig.mk
./device/huawei/angler/BoardConfig.mk
./device/generic/mini-emulator-x86/BoardConfig.mk
./device/generic/arm64/BoardConfig.mk
./device/generic/mini-emulator-x86_64/BoardConfig.mk
./device/generic/mini-emulator-armv7-a-neon/BoardConfig.mk
./device/generic/mips/BoardConfig.mk
./device/generic/mips64/BoardConfig.mk
./device/generic/x86_64/BoardConfig.mk
./device/generic/mini-emulator-arm64/BoardConfig.mk
./device/generic/mini-emulator-mips/BoardConfig.mk
./device/generic/x86/BoardConfig.mk
./device/generic/armv7-a-neon/BoardConfig.mk
./device/generic/mini-emulator-mips64/BoardConfig.mk
./device/lge/bullhead/BoardConfig.mk
./device/linaro/generic/linaro_x86_64_only/BoardConfig.mk
./device/linaro/generic/linaro_arm64/BoardConfig.mk
./device/linaro/generic/linaro_arm64_only/BoardConfig.mk
./device/linaro/generic/linaro_x86_64/BoardConfig.mk
./device/linaro/generic/BoardConfig.mk
./device/linaro/generic/linaro_arm/BoardConfig.mk
./device/linaro/hikey/hikey/BoardConfig.mk

# Edit the BoardConfig.mk that you are using for your build
cd device/linaro/generic/
nano BoardConfig.mk

# Add the config option
WITH_DEXPREOPT := true

# Propagate the new settings
make defconfig
make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Increase system partition size&lt;/h2&gt;
&lt;p&gt;Depending on the previous system partition size and how many APKs that are built, you may need to increase the system partition size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nano configs/defconfig

# Change the below variable to something big enough to house all of you binaries
CONFIG_BOARD_SYSTEMIMAGE_PARTITION_SIZE=1100000000

# Propagate the new settings
make defconfig
make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="aosp"></category><category term="apk"></category><category term="dex2oat"></category><category term="android"></category><category term="collabora"></category></entry><entry><title>Running an Android Unit Test</title><link href="https://memcpy.io/running-an-android-unit-test.html" rel="alternate"></link><published>2016-12-07T20:23:00+01:00</published><updated>2016-12-07T20:23:00+01:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-12-07:/running-an-android-unit-test.html</id><summary type="html">&lt;p&gt;A similar approach can be used for any Android module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd aosp
bash
source build/envsetup.sh &amp;amp;&amp;amp; \
lunch linaro_arm64-userdebug &amp;amp;&amp;amp; \
mmm system/core/libsync/tests &amp;amp;&amp;amp; \
adb root &amp;amp;&amp;amp; \
adb remount &amp;amp;&amp;amp; \
adb sync &amp;amp;&amp;amp; \
adb shell /data/nativetest64/sync-unit-tests/sync-unit-tests
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A similar approach can be used for any Android module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd aosp
bash
source build/envsetup.sh &amp;amp;&amp;amp; \
lunch linaro_arm64-userdebug &amp;amp;&amp;amp; \
mmm system/core/libsync/tests &amp;amp;&amp;amp; \
adb root &amp;amp;&amp;amp; \
adb remount &amp;amp;&amp;amp; \
adb sync &amp;amp;&amp;amp; \
adb shell /data/nativetest64/sync-unit-tests/sync-unit-tests
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="kernel"></category><category term="android"></category><category term="aosp"></category><category term="adb"></category></entry><entry><title>Building Android for Qemu with Mesa and Virgil3D</title><link href="https://memcpy.io/building-android-for-qemu-with-mesa-and-virgil3d.html" rel="alternate"></link><published>2016-08-30T15:22:00+02:00</published><updated>2016-08-30T15:22:00+02:00</updated><author><name>Robert Foss</name></author><id>tag:memcpy.io,2016-08-30:/building-android-for-qemu-with-mesa-and-virgil3d.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-08-30_android_qemu.png" title="Android running on Qemu"&gt;&lt;/p&gt;
&lt;p&gt;Developing Linux for Android on Qemu allows you to do some things that are
not necessarily possible using the stock emulator.
For my purposes I need access to a GPU and be able to modify the driver, which
is where Virgilrenderer and Qemu comes in handy.&lt;/p&gt;
&lt;p&gt;The guide below helps you compile Android and run it on top of Qemu with
Mesa/Virgilrenderer supplying a virtual GPU.
Because of this, the following guide is aimed at Linux hosts.&lt;/p&gt;
&lt;p&gt;This guide is based on Rob Herrings &lt;a href="https://github.com/robherring/generic_device/wiki/KConfig-based-Multi-platform-Android-Device-(and-Mesa-graphics)"&gt;fantastic guide&lt;/a&gt;, but has
been slightly streamlined and had physical hardware support stripped out.&lt;/p&gt;
&lt;h2&gt;Install dependencies&lt;/h2&gt;
&lt;p&gt;These dependencies were available on Ubuntu 16.04, some alternative packages
might be needed for other distributions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install autoconf gcc-aarch64-linux-gnu libaio-dev libbluetooth-dev â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Alt text" src="/images/2016-08-30_android_qemu.png" title="Android running on Qemu"&gt;&lt;/p&gt;
&lt;p&gt;Developing Linux for Android on Qemu allows you to do some things that are
not necessarily possible using the stock emulator.
For my purposes I need access to a GPU and be able to modify the driver, which
is where Virgilrenderer and Qemu comes in handy.&lt;/p&gt;
&lt;p&gt;The guide below helps you compile Android and run it on top of Qemu with
Mesa/Virgilrenderer supplying a virtual GPU.
Because of this, the following guide is aimed at Linux hosts.&lt;/p&gt;
&lt;p&gt;This guide is based on Rob Herrings &lt;a href="https://github.com/robherring/generic_device/wiki/KConfig-based-Multi-platform-Android-Device-(and-Mesa-graphics)"&gt;fantastic guide&lt;/a&gt;, but has
been slightly streamlined and had physical hardware support stripped out.&lt;/p&gt;
&lt;h2&gt;Install dependencies&lt;/h2&gt;
&lt;p&gt;These dependencies were available on Ubuntu 16.04, some alternative packages
might be needed for other distributions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install autoconf gcc-aarch64-linux-gnu libaio-dev libbluetooth-dev libbrlapi-dev libbz2-dev libcap-dev libcap-ng-dev libcurl4-gnutls-dev libepoxy-dev libfdt-dev libgbm-dev libgles2-mesa-dev libglib2.0-dev libgtk-3-dev libibverbs-dev libjpeg8-dev liblzo2-dev libncurses5-dev libnuma-dev librbd-dev librdmacm-dev libsasl2-dev libsdl1.2-dev libsdl2-dev libseccomp-dev libsnappy-dev libssh2-1-dev libspice-server-dev libspice-server1 libtool libusb-1.0-0 libusb-1.0-0-dev libvde-dev libvdeplug-dev libvte-dev libxen-dev valgrind xfslibs-dev xutils-dev zlib1g-dev libusbredirhost-dev usbredirserver
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Set up paths&lt;/h2&gt;
&lt;p&gt;Naturally all of the paths below are configurable, this is just what I used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PROJECT_PATH=&amp;quot;/opt/qemu_android&amp;quot;
export VIRGLRENDERER_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/virglrenderer&amp;quot;
export QEMU_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/qemu&amp;quot;
export LINUX_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/linux&amp;quot;
export ANDROID_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/android&amp;quot;
export ANDROID_TOOLS_PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/android-tools&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Virglrenderer&lt;/h2&gt;
&lt;p&gt;Virglrenderer creates a virtual 3D GPU, that allows the Qemu guest to use the
graphics capabilities of the host machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.freedesktop.org/git/virglrenderer &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VIRGLRENDERER_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VIRGLRENDERER_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
./autogen.sh
make -j7
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Qemu&lt;/h2&gt;
&lt;p&gt;Qemu is a full system emulator, and supports a multitude of machine architectures.
We're going to to use x86_64 but also build support for arm64/aarch64.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.qemu-project.org/qemu.git &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;QEMU_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
mkdir &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;QEMU_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/build
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;QEMU_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/build
../configure --target-list=aarch64-softmmu,x86_64-softmmu --enable-gtk --with-gtkabi=3.0 --enable-kvm --enable-spice --enable-usb-redir --enable-libusb
make -j7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Linux kernel&lt;/h2&gt;
&lt;p&gt;Build trunk of mainline linux kernel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; The below instructions use upstream/master but during testing of
this guide, &lt;em&gt;https://git.kernel.org/pub/scm/linux/kernel/git/padovan/linux.git&lt;/em&gt;
and the &lt;em&gt;fences&lt;/em&gt; branch was used due to SW_SYNC not yet being included in upstream.
Inclusion is targeted for &lt;em&gt;v4.9&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LINUX_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LINUX_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
wget http://memcpy.io/files/2016-08-30/Kconfig -O &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LINUX_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.config
make oldconfig
make -j7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If you decide not to use the &lt;em&gt;.config&lt;/em&gt; linked in this step, a few
Kconfig options need to be set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CONFIG_ANDROID=y
CONFIG_ANDROID_BINDER_IPC=y
CONFIG_AUDIT=y
CONFIG_HAVE_ARCH_AUDITSYSCALL=y
CONFIG_AUDITSYSCALL=y
CONFIG_AUDIT_WATCH=y
CONFIG_AUDIT_TREE=y
CONFIG_DRM=y
CONFIG_SECURITY_SELINUX=y
CONFIG_SECURITY_SELINUX_BOOTPARAM=y
CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1
CONFIG_SECURITY_SELINUX_DISABLE=y
CONFIG_SECURITY_SELINUX_DEVELOP=y
CONFIG_SECURITY_SELINUX_AVC_STATS=y
CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0
CONFIG_DEFAULT_SECURITY_SELINUX=y
CONFIG_DEFAULT_SECURITY=&amp;quot;selinux&amp;quot;
CONFIG_VIRTIO_BLK=y
CONFIG_SCSI_VIRTIO=y
CONFIG_VIRTIO_NET=y
CONFIG_VIRTIO_CONSOLE=y
CONFIG_HW_RANDOM_VIRTIO=y
CONFIG_DRM_VIRTIO_GPU=y
CONFIG_VIRT_DRIVERS=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_PCI_LEGACY=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_VIRTIO_INPUT=y
CONFIG_VIRTIO_MMIO=y
CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES=y
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
CONFIG_SYNC=y
CONFIG_SW_SYNC=y
CONFIG_SYNC_FILE=y
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Android&lt;/h2&gt;
&lt;p&gt;Build the Android Open Source Project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; When running &lt;em&gt;source build/envsetup.sh&lt;/em&gt; make sure that you are
using bash. I had issues running &lt;em&gt;lunch&lt;/em&gt; using zsh.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ANDROID_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ANDROID_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
repo init -u https://android.googlesource.com/platform/manifest -b master
cd .repo
git clone https://github.com/robherring/android_manifest.git -b android-6.0 local_manifests
cd ..
repo sync -j20
cd device/linaro/generic
make defconfig
make all
cd ../../..
# The following snippet must be run in bash
bash
source build/envsetup.sh
# Select linaro_x86_64-userdebug
lunch
make -j7
# We don&amp;#39;t need to use bash any longer
exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As of this writing DRM fences related patches by Gustavo Padovan have yet to be included
into AOSP, and therefore have to be included manually until it is upstreamed.
After switching to this branch, the AOSP project has to be rebuilt again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd $ANDROID_PATH/system/core/
git remote add padovan git://git.collabora.com/git/user/padovan/android-system-core.git
git fetch padovan
git checkout padovan/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;mkbootimg&lt;/h2&gt;
&lt;p&gt;Fetch the make boot image script. This script later assembles the boot image, &lt;em&gt;boot.img&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://android.googlesource.com/platform/system/core.git $ANDROID_TOOLS_PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Run Qemu machine&lt;/h2&gt;
&lt;p&gt;When running the below script, make sure that the all of the paths from step two
have been exported.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://memcpy.io/files/2016-08-30/boot_android_qemu.sh -O &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/boot_android_qemu.sh
chmod +x &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/boot_android_qemu.sh
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/boot_android_qemu.sh x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this guide will have enabled you build the required software and run Android on
Qemu with a virtual GPU.
This post has been a part of work undertaken by my employer &lt;a href="http://www.collabora.com"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="kernel"></category><category term="android"></category><category term="qemu"></category><category term="collabora"></category></entry></feed>