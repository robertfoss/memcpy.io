<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>memcpy.io - CAD</title><link>http://memcpy.io/</link><description></description><lastBuildDate>Mon, 12 Oct 2015 16:51:00 +0200</lastBuildDate><item><title>WS2812 LED Matrix</title><link>http://memcpy.io/ws2812-led-matrix.html</link><description>&lt;p&gt;&lt;img alt="Alt text" src="/images/2015-10-12_led_matrix_running.jpg" title="LED Matrix Running"&gt;&lt;/p&gt;
&lt;p&gt;The LED Matrix is constructed out of a WS2812B 8x8 panel, a 3D printed case, an ESP8266, a LiPo battery and some software.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/robertfoss/esp8266_ws2812_matrix.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The software is divided into two parts. The receiving end is run on the ESP8266 that has been flashed with &lt;a href="https://github.com/nodemcu/nodemcu-firmware"&gt;NodeMCU&lt;/a&gt; and is a simple lua script that receives UDP packets and forwards them to the excellent WS2812 module created by the the equally excellent &lt;a href="https://github.com/kbeckmann"&gt;Konrad Beckmann&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second part is run on a host pc. It's a simple python script that generates a framebuffer from a sinusoidal animation and transmits it over UDP to the IP of the ESP8266.
This relies on the host pc being able to connect to the ESP8266 â€¦&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Foss</dc:creator><pubDate>Mon, 12 Oct 2015 16:51:00 +0200</pubDate><guid isPermaLink="false">tag:memcpy.io,2015-10-12:/ws2812-led-matrix.html</guid><category>ESP8266</category><category>ESP</category><category>WS2812</category><category>WS2812B</category><category>3D Printing</category><category>CAD</category></item></channel></rss>